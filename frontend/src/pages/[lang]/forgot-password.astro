---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('auth.forgotPasswordTitle'),
  description: t('auth.forgotPasswordSubtitle'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<Layout metadata={metadata}>
  <WidgetWrapper 
    id="forgot-password" 
    containerClass="max-w-md mx-auto min-h-screen flex items-center"
  >
    <Fragment slot="bg">
      <div class="absolute inset-0 bg-gray-50 dark:bg-gray-900"></div>
    </Fragment>
    
    <div class="w-full space-y-8">
      <Headline 
        title={t('auth.forgotPasswordTitle')}
        subtitle={t('auth.forgotPasswordSubtitle')}
        classes={{
          container: 'text-center',
          title: 'text-3xl font-extrabold',
          subtitle: 'text-sm text-gray-600 dark:text-gray-400'
        }}
      />
      
      <!-- Messages -->
      <div id="error-message" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-4 py-3 rounded">
      </div>
      
      <div id="success-message" class="hidden bg-green-100 dark:bg-green-900/20 border border-green-400 text-green-700 dark:text-green-400 px-4 py-3 rounded">
      </div>
      
      <div id="info-message" class="hidden bg-blue-100 dark:bg-blue-900/20 border border-blue-400 text-blue-700 dark:text-blue-400 px-4 py-3 rounded">
      </div>
      
      <!-- Reset Password Form -->
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div class="space-y-6">
          <!-- Icon -->
          <div class="text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100 dark:bg-yellow-900/20">
              <svg class="h-6 w-6 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
              </svg>
            </div>
            <p class="mt-4 text-sm text-gray-600 dark:text-gray-400">
              {t('auth.resetPasswordInfo')}
            </p>
          </div>

          <form id="reset-form" class="space-y-6">
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('auth.email')} <span class="text-red-500">*</span>
              </label>
              <input 
                id="email" 
                name="email" 
                type="email" 
                required 
                autocomplete="email"
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                placeholder={t('auth.emailPlaceholder')}
              />
              <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">{t('auth.resetPasswordEmailHint')}</p>
            </div>
            
            <div class="mt-6">
              <button 
                type="submit" 
                id="reset-button"
                class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
              >
                <span id="reset-button-text">{t('auth.sendResetLink')}</span>
                <svg id="reset-loading-spinner" class="hidden animate-spin -mr-1 ml-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </button>
            </div>
          </form>
          
          <!-- Back to login -->
          <div class="text-center">
            <a href={`/${lang}/login`} class="text-sm text-gray-600 hover:text-gray-500 dark:text-gray-400 dark:hover:text-gray-300">
              ‚Üê {t('auth.backToLogin')}
            </a>
          </div>
        </div>
      </div>
    </div>
  </WidgetWrapper>
</Layout>

<script>
  import { AdminAuth } from '../../utils/adminAuth';
  
  document.addEventListener('DOMContentLoaded', () => {
    // Check if already logged in
    if (AdminAuth.isAuthenticated()) {
      const currentLang = window.location.pathname.split('/')[1];
      const user = AdminAuth.getCurrentUser();
      const redirectUrl = user?.is_admin 
        ? `/${currentLang}/admin/dashboard` 
        : `/${currentLang}/blog`;
      window.location.href = redirectUrl;
      return;
    }
    
    const resetForm = document.getElementById('reset-form') as HTMLFormElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const resetButton = document.getElementById('reset-button') as HTMLButtonElement;
    const resetButtonText = document.getElementById('reset-button-text') as HTMLSpanElement;
    const resetSpinner = document.getElementById('reset-loading-spinner') as HTMLElement;
    
    const errorDiv = document.getElementById('error-message') as HTMLDivElement;
    const successDiv = document.getElementById('success-message') as HTMLDivElement;
    const infoDiv = document.getElementById('info-message') as HTMLDivElement;
    
    function showError(message: string) {
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
      successDiv.classList.add('hidden');
      infoDiv.classList.add('hidden');
    }
    
    function showSuccess(message: string) {
      successDiv.textContent = message;
      successDiv.classList.remove('hidden');
      errorDiv.classList.add('hidden');
      infoDiv.classList.add('hidden');
    }
    
    // function showInfo(message: string) {
    //     infoMessage = message;
    //     showInfoMessage = true;
    //     setTimeout(() => {
    //         showInfoMessage = false;
    //     }, 3000);
    // }
    
    function hideMessages() {
      errorDiv.classList.add('hidden');
      successDiv.classList.add('hidden');
      infoDiv.classList.add('hidden');
    }
    
    // Reset form submission
    resetForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = emailInput.value.trim();
      
      if (!email) {
        showError('Please enter your email address');
        return;
      }
      
      // Show loading state
      resetButton.disabled = true;
      resetButtonText.textContent = 'Sending...';
      resetSpinner.classList.remove('hidden');
      hideMessages();
      
      try {
        // For now, just show success message
        // TODO: Implement actual password reset API call
        showSuccess('Password reset link sent! Please check your email.');
        
        // Clear form
        resetForm.reset();
        
        // Redirect to login after delay
        setTimeout(() => {
          const currentLang = window.location.pathname.split('/')[1];
          window.location.href = `/${currentLang}/login`;
        }, 3000);
        
      } catch (error) {
        const message = error instanceof Error ? error.message : 'Failed to send reset link';
        showError(message);
      } finally {
        // Reset button state
        resetButton.disabled = false;
        resetButtonText.textContent = 'Send Reset Link';
        resetSpinner.classList.add('hidden');
      }
    });
    
    // Auto-focus email field
    emailInput?.focus();
  });
</script>
