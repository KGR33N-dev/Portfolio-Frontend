---
import Layout from '~/layouts/PageLayout.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('admin.editPost'),
  description: t('admin.blogManagement'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<Layout metadata={metadata}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900 py-12">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
          <div>
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">{t('admin.editPost')}</h1>
            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
              {t('admin.editPostSubtitle')}
            </p>
          </div>
          <a 
            href={`/${lang}/admin/dashboard`}
            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            {t('admin.backToDashboard')}
          </a>
        </div>
      </div>

      <!-- Loading State -->
      <div id="loading-state" class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-8 text-center">
        <div class="flex items-center justify-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-3"></div>
          <span class="text-gray-600 dark:text-gray-400">{t('admin.loadingPost')}</span>
        </div>
      </div>

      <!-- Error State -->
      <div id="error-state" class="hidden bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
        <div class="flex items-center">
          <svg class="w-6 h-6 text-red-600 dark:text-red-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div>
            <h3 class="text-lg font-semibold text-red-800 dark:text-red-200">{t('admin.errorLoadingPost')}</h3>
            <p id="error-message" class="text-red-700 dark:text-red-300 mt-1"></p>
          </div>
        </div>
        <div class="mt-4">
          <button id="retry-btn" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
            {t('admin.tryAgain')}
          </button>
          <a href={`/${lang}/admin/dashboard`} class="ml-3 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors">
            {t('admin.backToDashboard')}
          </a>
        </div>
      </div>

      <!-- Edit Form -->
      <form id="edit-post-form" class="hidden space-y-6">
        <!-- Post Title -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <label for="post-title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {t('admin.postTitle')}
          </label>
          <input
            type="text"
            id="post-title"
            name="title"
            required
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white text-lg"
            placeholder={t('admin.enterPostTitle')}
          />
        </div>

        <!-- URL Slug -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <label for="post-slug" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {t('admin.postSlug')}
          </label>
          <input
            type="text"
            id="post-slug"
            name="slug"
            required
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
            placeholder={t('admin.urlSlugPlaceholder')}
          />
          <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            {t('admin.urlSlugHint')}
          </p>
        </div>

        <!-- Post Content -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <label for="post-content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {t('admin.postContent')}
          </label>
          <textarea
            id="post-content"
            name="content"
            rows="20"
            required
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white font-mono text-sm"
            placeholder={t('admin.writeContentPlaceholder')}
          ></textarea>
          <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            {t('admin.markdownHint')}
          </p>
        </div>

        <!-- Post Excerpt -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <label for="post-excerpt" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {t('admin.postExcerpt')}
          </label>
          <textarea
            id="post-excerpt"
            name="excerpt"
            rows="3"
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
            placeholder={t('admin.excerptPlaceholder')}
          ></textarea>
        </div>

        <!-- Meta Fields -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Category -->
          <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <label for="post-category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postCategory')}
            </label>
            <input
              type="text"
              id="post-category"
              name="category"
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
              placeholder={t('admin.categoryPlaceholder')}
            />
          </div>

          <!-- Tags -->
          <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <label for="post-tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postTags')}
            </label>
            <input
              type="text"
              id="post-tags"
              name="tags"
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
              placeholder={t('admin.tagsPlaceholder')}
            />
          </div>
        </div>

        <!-- Advanced Fields -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Featured Image -->
          <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <label for="post-image" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postImage')}
            </label>
            <input
              type="url"
              id="post-image"
              name="featured_image"
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
              placeholder={t('admin.imageUrlPlaceholder')}
            />
          </div>

          <!-- Language -->
          <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <label for="post-language" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postLanguage')}
            </label>
            <select
              id="post-language"
              name="language"
              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
            >
              <option value="en">{t('admin.languageEnglish')}</option>
              <option value="pl">{t('admin.languagePolish')}</option>
            </select>
          </div>
        </div>

        <!-- SEO Meta Fields -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">{t('admin.seoMetaTags')}</h3>
          
          <div class="space-y-4">
            <div>
              <label for="meta-title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.metaTitle')}
              </label>
              <input
                type="text"
                id="meta-title"
                name="meta_title"
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
                placeholder={t('admin.metaTitlePlaceholder')}
              />
            </div>
            
            <div>
              <label for="meta-description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.metaDescription')}
              </label>
              <textarea
                id="meta-description"
                name="meta_description"
                rows="2"
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-800 dark:text-white"
                placeholder={t('admin.metaDescriptionPlaceholder')}
              ></textarea>
            </div>
          </div>
        </div>

        <!-- Post Status and Actions -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div class="flex items-center space-x-4">
              <label class="flex items-center">
                <input
                  type="checkbox"
                  id="is-published"
                  name="is_published"
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded dark:border-gray-600 dark:bg-slate-800"
                />
                <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">
                  {t('admin.published')}
                </span>
              </label>
              
              <div class="text-sm text-gray-600 dark:text-gray-400">
                <span id="post-status-text">Status: Draft</span>
              </div>
            </div>

            <div class="flex flex-col sm:flex-row gap-3">
              <button
                type="button"
                id="save-draft-btn"
                class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                {t('admin.saveAsDraft')}
              </button>
              
              <button
                type="submit"
                id="update-post-btn"
                class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
                </svg>
                {t('admin.updatePost')}
              </button>
              
              <button
                type="button"
                id="delete-post-btn"
                class="inline-flex items-center justify-center px-6 py-3 border border-red-300 dark:border-red-600 text-sm font-medium rounded-lg text-red-700 dark:text-red-400 bg-white dark:bg-slate-800 hover:bg-red-50 dark:hover:bg-red-900/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                {t('admin.deletePost')}
              </button>
            </div>
          </div>
        </div>
      </form>

      <!-- Success Message -->
      <div id="success-message" class="hidden bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6 mb-6">
        <div class="flex items-center">
          <svg class="w-6 h-6 text-green-600 dark:text-green-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div>
            <h3 class="text-lg font-semibold text-green-800 dark:text-green-200">{t('admin.postUpdatedSuccessfully')}</h3>
            <p class="text-green-700 dark:text-green-300 mt-1">{t('admin.changesHaveBeenSaved')}</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script type="module">
  import { AdminAuth } from '/src/utils/adminAuth.js';
  import { API_URLS } from '/src/config/api.js';

  let currentPostId = null;
  let currentPost = null;

  // DOM Elements
  const loadingState = document.getElementById('loading-state');
  const errorState = document.getElementById('error-state');
  const editForm = document.getElementById('edit-post-form');
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');
  const retryBtn = document.getElementById('retry-btn');

  // Form elements
  const titleInput = document.getElementById('post-title');
  const slugInput = document.getElementById('post-slug');
  const contentTextarea = document.getElementById('post-content');
  const excerptTextarea = document.getElementById('post-excerpt');
  const categoryInput = document.getElementById('post-category');
  const tagsInput = document.getElementById('post-tags');
  const imageInput = document.getElementById('post-image');
  const languageSelect = document.getElementById('post-language');
  const metaTitleInput = document.getElementById('meta-title');
  const metaDescriptionTextarea = document.getElementById('meta-description');
  const isPublishedCheckbox = document.getElementById('is-published');
  const postStatusText = document.getElementById('post-status-text');

  // Action buttons
  const saveDraftBtn = document.getElementById('save-draft-btn');
  const updatePostBtn = document.getElementById('update-post-btn');
  const deletePostBtn = document.getElementById('delete-post-btn');

  function initEditPost() {
    // Check authentication
    if (!AdminAuth.isAuthenticated()) {
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/login`;
      return;
    }

    // Check if user is admin
    const user = AdminAuth.getCurrentUser();
    if (!user?.is_admin) {
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/admin/dashboard`;
      return;
    }

    // Get post ID from URL
    const urlParams = new URLSearchParams(window.location.search);
    currentPostId = urlParams.get('id');

    if (!currentPostId) {
      showError('No post ID provided');
      return;
    }

    // Load post data
    loadPost();

    // Event listeners
    retryBtn?.addEventListener('click', loadPost);
    editForm?.addEventListener('submit', handleUpdatePost);
    saveDraftBtn?.addEventListener('click', handleSaveDraft);
    deletePostBtn?.addEventListener('click', handleDeletePost);
    isPublishedCheckbox?.addEventListener('change', updateStatusText);
    titleInput?.addEventListener('input', generateSlug);
  }

  async function loadPost() {
    showLoading();

    try {
      console.log('Loading post with ID:', currentPostId);
      
      // Use admin endpoint to get the specific post (including drafts)
      const response = await fetch(API_URLS.getAdminPost(currentPostId), {
        headers: {
          'Authorization': `Bearer ${AdminAuth.getToken()}`,
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`Failed to load post: ${response.status}`);
      }

      const post = await response.json();
      console.log('API Response:', post);
      
      if (!post) {
        throw new Error('Post not found');
      }

      currentPost = post;
      console.log('Loaded post:', currentPost);
      populateForm(currentPost);
      showForm();
    } catch (error) {
      console.error('Error loading post:', error);
      showError(error.message);
    }
  }

  function populateForm(post) {
    console.log('Populating form with post:', post);
    
    // Find the appropriate translation to display
    const currentLang = window.location.pathname.split('/')[1]; // Get current language from URL
    const translations = post.translations || [];
    
    // Prefer current language, fallback to first available translation
    let activeTranslation = translations.find(t => t.language_code === currentLang);
    if (!activeTranslation && translations.length > 0) {
      activeTranslation = translations[0];
    }
    
    console.log('Active translation:', activeTranslation, 'for language:', currentLang);
    
    // Populate basic post data
    if (slugInput) slugInput.value = post.slug || '';
    if (categoryInput) categoryInput.value = post.category || '';
    if (tagsInput) tagsInput.value = Array.isArray(post.tags) ? post.tags.join(', ') : (post.tags || '');
    if (imageInput) imageInput.value = post.featured_image || '';
    if (isPublishedCheckbox) {
      isPublishedCheckbox.checked = post.is_published || false;
      updateStatusText();
    }
    
    // Populate translation data if available
    if (activeTranslation) {
      if (titleInput) titleInput.value = activeTranslation.title || '';
      if (contentTextarea) contentTextarea.value = activeTranslation.content || '';
      if (excerptTextarea) excerptTextarea.value = activeTranslation.excerpt || '';
      if (metaTitleInput) metaTitleInput.value = activeTranslation.meta_title || '';
      if (metaDescriptionTextarea) metaDescriptionTextarea.value = activeTranslation.meta_description || '';
      if (languageSelect) languageSelect.value = activeTranslation.language_code || 'en';
    } else {
      // Clear translation fields if no translation found
      if (titleInput) titleInput.value = '';
      if (contentTextarea) contentTextarea.value = '';
      if (excerptTextarea) excerptTextarea.value = '';
      if (metaTitleInput) metaTitleInput.value = '';
      if (metaDescriptionTextarea) metaDescriptionTextarea.value = '';
      if (languageSelect) languageSelect.value = currentLang || 'en';
    }
  }

  function generateSlug() {
    if (!titleInput || !slugInput) return;
    
    const title = titleInput.value;
    const slug = title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim('-');
    
    if (!slugInput.value || slugInput.value === '') {
      slugInput.value = slug;
    }
  }

  function updateStatusText() {
    if (!postStatusText || !isPublishedCheckbox) return;
    
    postStatusText.textContent = isPublishedCheckbox.checked 
      ? 'Status: Published' 
      : 'Status: Draft';
  }

  async function handleUpdatePost(event) {
    event.preventDefault();
    await savePost(isPublishedCheckbox?.checked || false);
  }

  async function handleSaveDraft() {
    await savePost(false);
  }

  async function savePost(publish = false) {
    const formData = new FormData(editForm);
    
    // Get current language from URL
    const currentLang = window.location.pathname.split('/')[1];
    
    // Build the translation object for the current language
    const translation = {
      language_code: formData.get('language') || currentLang,
      title: formData.get('title'),
      content: formData.get('content'),
      excerpt: formData.get('excerpt') || '',
      meta_title: formData.get('meta_title') || '',
      meta_description: formData.get('meta_description') || ''
    };
    
    // Build the post data with multilingual structure
    const postData = {
      slug: formData.get('slug'),
      category: formData.get('category'),
      tags: formData.get('tags')?.split(',').map(tag => tag.trim()).filter(Boolean) || [],
      featured_image: formData.get('featured_image'),
      is_published: publish,
      translations: [translation] // For now, we're only updating one translation
    };

    console.log('Saving post data:', postData);

    try {
      updatePostBtn.disabled = true;
      updatePostBtn.innerHTML = `
        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
        Updating...
      `;

      const response = await fetch(API_URLS.updatePost(currentPostId), {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${AdminAuth.getToken()}`,
          'Accept': 'application/json'
        },
        body: JSON.stringify(postData)
      });

      console.log('Update response status:', response.status);

      if (!response.ok) {
        const contentType = response.headers.get('content-type');
        let errorData;
        
        try {
          if (contentType && contentType.includes('application/json')) {
            errorData = await response.json();
          } else {
            errorData = { detail: await response.text() };
          }
        } catch (parseError) {
          console.error('Failed to parse error response:', parseError);
          errorData = { detail: `HTTP ${response.status}: ${response.statusText}` };
        }
        
        console.error('Update error response:', errorData);
        throw new Error(errorData.detail || 'Failed to update post');
      }

      const result = await response.json();
      console.log('Post updated successfully:', result);

      showSuccess();
      
      // Redirect after success
      setTimeout(() => {
        const currentLang = window.location.pathname.split('/')[1];
        window.location.href = `/${currentLang}/admin/dashboard`;
      }, 2000);

    } catch (error) {
      console.error('Error saving post:', error);
      alert(`Error saving post: ${error.message}`);
    } finally {
      updatePostBtn.disabled = false;
      updatePostBtn.innerHTML = `
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
        </svg>
        Update Post
      `;
    }
  }

  async function handleDeletePost() {
    if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
      return;
    }

    try {
      const response = await fetch(`${API_URLS.deletePost(currentPostId)}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${AdminAuth.getToken()}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to delete post');
      }

      alert('Post deleted successfully');
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/admin/dashboard`;
    } catch (error) {
      console.error('Error deleting post:', error);
      alert(`Error deleting post: ${error.message}`);
    }
  }

  function showLoading() {
    loadingState?.classList.remove('hidden');
    errorState?.classList.add('hidden');
    editForm?.classList.add('hidden');
    successMessage?.classList.add('hidden');
  }

  function showError(message) {
    loadingState?.classList.add('hidden');
    errorState?.classList.remove('hidden');
    editForm?.classList.add('hidden');
    if (errorMessage) errorMessage.textContent = message;
  }

  function showForm() {
    loadingState?.classList.add('hidden');
    errorState?.classList.add('hidden');
    editForm?.classList.remove('hidden');
  }

  function showSuccess() {
    successMessage?.classList.remove('hidden');
    setTimeout(() => {
      successMessage?.classList.add('hidden');
    }, 5000);
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initEditPost);
  document.addEventListener('astro:page-load', initEditPost);
</script>
