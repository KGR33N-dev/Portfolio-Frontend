---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';
import { getFrontendUrl } from '~/config/api';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('admin.createPost'),
  description: t('admin.blogManagement'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<Layout metadata={metadata}>
  <WidgetWrapper 
    id="create-post" 
    containerClass="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8"
  >
    <!-- Header -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div>
          <Headline 
            title={t('admin.createPost')}
            subtitle={t('admin.blogManagement')}
            classes={{
              container: '',
              title: 'text-2xl font-bold text-gray-900 dark:text-white',
              subtitle: 'text-sm text-gray-600 dark:text-gray-400 mt-1'
            }}
          />
        </div>
        <a 
          href={`/${lang}/admin/dashboard`}
          class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 font-medium"
        >
          ‚Üê Dashboard
        </a>
      </div>
    </div>

    <!-- Error/Success Messages -->
    <div id="error-message" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-4 py-3 rounded mb-6">
    </div>
    
    <div id="success-message" class="hidden bg-green-100 dark:bg-green-900/20 border border-green-400 text-green-700 dark:text-green-400 px-4 py-3 rounded mb-6">
    </div>

    <!-- Create Post Form -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
      <form id="create-post-form" class="p-6 space-y-6">
        
        <!-- General Post Settings -->
        <div class="border-b border-gray-200 dark:border-gray-700 pb-6">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">{t('admin.generalSettings')}</h3>
          
          <!-- Slug -->
          <div class="mb-6">
            <label for="slug" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postSlugRequired')}
            </label>
            <input 
              id="slug" 
              name="slug" 
              type="text" 
              required 
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('admin.postSlugPlaceholder')}
            />
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.urlSlugDescription')}</p>
          </div>

          <!-- Author and Category Row -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <label for="author" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.author')}
              </label>
              <input 
                id="author" 
                name="author" 
                type="text" 
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                placeholder={t('admin.authorPlaceholder')}
              />
            </div>

            <div>
              <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.category')}
              </label>
              <select 
                id="category" 
                name="category" 
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              >
                <option value="">{t('admin.selectCategory')}</option>
                <option value="programming">Programming</option>
                <option value="tutorial">Tutorial</option>
                <option value="technology">Technology</option>
                <option value="web-development">Web Development</option>
                <option value="backend">Backend</option>
                <option value="python">Python</option>
                <option value="fastapi">FastAPI</option>
                <option value="astro">Astro</option>
                <option value="gamedev">GameDev</option>
                <option value="general">General</option>
              </select>
            </div>
          </div>

          <!-- Featured Image -->
          <div class="mb-6">
            <label for="featured_image" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.featuredImage')}
            </label>
            <input 
              id="featured_image" 
              name="featured_image" 
              type="url" 
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('admin.imageUrlPlaceholder')}
            />
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.featuredImageDescription')}</p>
          </div>

          <!-- Tags -->
          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postTags')}
            </label>
            <input 
              id="tags" 
              name="tags" 
              type="text" 
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('admin.tagsPlaceholder')}
            />
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.separateTagsComma')}</p>
          </div>
        </div>

        <!-- Translation Management -->
        <div>
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">{t('admin.translations')}</h3>
            <div class="flex gap-2">
              <button 
                type="button" 
                id="add-polish-btn"
                class="px-4 py-2 text-sm bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                {t('admin.addPolish')}
              </button>
              <button 
                type="button" 
                id="add-english-btn"
                class="px-4 py-2 text-sm bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                {t('admin.addEnglish')}
              </button>
            </div>
          </div>

          <!-- Translation sections will be added here dynamically -->
          <div id="translations-container" class="space-y-6">
            <!-- Default translation section for current language -->
            <div class="translation-section border border-gray-200 dark:border-gray-700 rounded-lg p-6" data-lang={lang}>
              <div class="flex justify-between items-center mb-4">
                <h4 class="text-md font-medium text-gray-900 dark:text-white">
                  {lang === 'pl' ? t('admin.polishVersion') : t('admin.englishVersion')}
                </h4>
                <button 
                  type="button" 
                  class="remove-translation-btn text-red-500 hover:text-red-700 text-sm"
                  data-lang={lang}
                  style="display: none;"
                >
                  {t('admin.remove')}
                </button>
              </div>

              <div class="space-y-4">
                <!-- Title -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {t('admin.titleRequired')}
                  </label>
                  <input 
                    name={`title-${lang}`}
                    type="text" 
                    required 
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                    placeholder={t('admin.enterPostTitlePlaceholder')}
                  />
                </div>

                <!-- Excerpt -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {t('admin.excerpt')}
                  </label>
                  <textarea 
                    name={`excerpt-${lang}`}
                    rows="3"
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                    placeholder={t('admin.excerptDescription')}
                  ></textarea>
                </div>

                <!-- Content -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {t('admin.contentRequired')}
                  </label>
                  <div class="relative">
                    <textarea 
                      name={`content-${lang}`}
                      rows="20"
                      required
                      class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors resize-y min-h-[500px]"
                      placeholder={t('admin.writeContentMarkdown')}
                    ></textarea>
                    <div class="absolute bottom-3 right-3 text-xs text-gray-400 dark:text-gray-500 bg-white dark:bg-slate-900 px-2 py-1 rounded">
                      {t('admin.markdownSupported')}
                    </div>
                  </div>
                </div>

                <!-- Meta fields -->
                <details class="border border-gray-200 dark:border-gray-700 rounded-lg">
                  <summary class="px-4 py-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-800 font-medium">
                    {t('admin.seoSettingsOptional')}
                  </summary>
                  <div class="px-4 pb-4 space-y-4">
                    <div>
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        {t('admin.metaTitle')}
                      </label>
                      <input 
                        name={`meta_title-${lang}`}
                        type="text" 
                        class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                        placeholder={t('admin.seoTitlePlaceholder')}
                      />
                    </div>
                    
                    <div>
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        {t('admin.metaDescription')}
                      </label>
                      <textarea 
                        name={`meta_description-${lang}`}
                        rows="2"
                        class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                        placeholder={t('admin.seoDescriptionPlaceholder')}
                      ></textarea>
                    </div>
                  </div>
                </details>
              </div>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200 dark:border-gray-700">
          <!-- Debug button for testing backend connection -->
          <button 
            type="button" 
            id="test-backend-btn"
            class="px-4 py-2 text-sm bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors"
          >
            {t('admin.testBackendConnection')}
          </button>
          
          <button 
            type="submit" 
            id="save-draft-btn"
            data-action="draft"
            class="flex-1 flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            <span id="draft-text">{t('admin.savePost')} ({t('admin.draft')})</span>
          </button>
          
          <button 
            type="submit" 
            id="publish-btn"
            data-action="publish"
            class="flex-1 flex items-center justify-center px-6 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            <span id="publish-text">{t('admin.publishPost')}</span>
          </button>
        </div>
      </form>
    </div>

    <!-- Access Denied Message (hidden by default) -->
    <div id="access-denied" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-6 py-4 rounded-lg text-center">
      <h3 class="font-semibold text-lg mb-2">{t('admin.accessDenied')}</h3>
      <p class="mb-4">You need to be logged in as an administrator to create posts.</p>
      <a href={`/${lang}/login`} class="inline-block px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
        Go to Login
      </a>
    </div>
  </WidgetWrapper>
</Layout>

<script>
  import { AdminAuth } from '../../../utils/adminAuth.js';
  import { API_URLS, getFrontendUrl } from '../../../config/api.js';
  
  function initCreatePost() {
    // Check authentication first
    if (!AdminAuth.isAuthenticated()) {
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/login`;
      return;
    }

    // Check if user is admin
    const user = AdminAuth.getCurrentUser();
    if (!user?.is_admin) {
      const accessDeniedDiv = document.getElementById('access-denied');
      const createPostContent = document.getElementById('create-post');
      
      if (accessDeniedDiv) {
        accessDeniedDiv.classList.remove('hidden');
      }
      if (createPostContent) {
        createPostContent.style.display = 'none';
      }
      return;
    }

    const form = document.getElementById('create-post-form') as HTMLFormElement;
    
    const saveDraftBtn = document.getElementById('save-draft-btn') as HTMLButtonElement;
    const publishBtn = document.getElementById('publish-btn') as HTMLButtonElement;
    const testBackendBtn = document.getElementById('test-backend-btn') as HTMLButtonElement;
    const draftText = document.getElementById('draft-text') as HTMLSpanElement;
    const publishText = document.getElementById('publish-text') as HTMLSpanElement;
    
    const errorDiv = document.getElementById('error-message') as HTMLDivElement;
    const successDiv = document.getElementById('success-message') as HTMLDivElement;
    
    const addPolishBtn = document.getElementById('add-polish-btn') as HTMLButtonElement;
    const addEnglishBtn = document.getElementById('add-english-btn') as HTMLButtonElement;
    const translationsContainer = document.getElementById('translations-container') as HTMLDivElement;

    // Function to collect all translations from form
    function collectTranslations(): Array<{
      language_code: string;
      title: string;
      content: string;
      excerpt: string;
      meta_title: string;
      meta_description: string;
    }> {
      const translations: Array<{
        language_code: string;
        title: string;
        content: string;
        excerpt: string;
        meta_title: string;
        meta_description: string;
      }> = [];
      const translationSections = document.querySelectorAll('.translation-section');
      
      translationSections.forEach(section => {
        const lang = section.getAttribute('data-lang');
        if (!lang) return;
        
        const titleInput = section.querySelector(`input[name="title-${lang}"]`) as HTMLInputElement;
        const excerptInput = section.querySelector(`textarea[name="excerpt-${lang}"]`) as HTMLTextAreaElement;
        const contentInput = section.querySelector(`textarea[name="content-${lang}"]`) as HTMLTextAreaElement;
        const metaTitleInput = section.querySelector(`input[name="meta_title-${lang}"]`) as HTMLInputElement;
        const metaDescInput = section.querySelector(`textarea[name="meta_description-${lang}"]`) as HTMLTextAreaElement;
        
        if (titleInput?.value.trim() && contentInput?.value.trim()) {
          translations.push({
            language_code: lang,
            title: titleInput.value.trim(),
            content: contentInput.value.trim(),
            excerpt: excerptInput?.value.trim() || '',
            meta_title: metaTitleInput?.value.trim() || '',
            meta_description: metaDescInput?.value.trim() || ''
          });
        }
      });
      
      return translations;
    }

    // Function to create a new translation section
    function createTranslationSection(lang: string) {
      const langName = lang === 'pl' ? 'üáµüá± Polish' : 'üá∫üá∏ English';
      
      const section = document.createElement('div');
      section.className = 'translation-section border border-gray-200 dark:border-gray-700 rounded-lg p-6';
      section.setAttribute('data-lang', lang);
      
      section.innerHTML = `
        <div class="flex justify-between items-center mb-4">
          <h4 class="text-md font-medium text-gray-900 dark:text-white">
            ${langName} Version
          </h4>
          <button 
            type="button" 
            class="remove-translation-btn text-red-500 hover:text-red-700 text-sm"
            data-lang="${lang}"
          >
            Remove
          </button>
        </div>

        <div class="space-y-4">
          <!-- Title -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Title *
            </label>
            <input 
              name="title-${lang}" 
              type="text" 
              required 
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder="Enter post title..."
            />
          </div>

          <!-- Excerpt -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Excerpt
            </label>
            <textarea 
              name="excerpt-${lang}"
              rows="3"
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder="Brief description of the post..."
            ></textarea>
          </div>

          <!-- Content -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Content *
            </label>
            <div class="relative">
              <textarea 
                name="content-${lang}"
                rows="20"
                required
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors resize-y min-h-[500px]"
                placeholder="Write your post content here... (Markdown supported)"
              ></textarea>
              <div class="absolute bottom-3 right-3 text-xs text-gray-400 dark:text-gray-500 bg-white dark:bg-slate-900 px-2 py-1 rounded">
                Markdown supported
              </div>
            </div>
          </div>

          <!-- Meta fields -->
          <details class="border border-gray-200 dark:border-gray-700 rounded-lg">
            <summary class="px-4 py-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-800 font-medium">
              SEO Settings (Optional)
            </summary>
            <div class="px-4 pb-4 space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Meta Title
                </label>
                <input 
                  name="meta_title-${lang}"
                  type="text" 
                  class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                  placeholder="SEO title (leave empty to use post title)"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Meta Description
                </label>
                <textarea 
                  name="meta_description-${lang}"
                  rows="2"
                  class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                  placeholder="SEO description (leave empty to use excerpt)"
                ></textarea>
              </div>
            </div>
          </details>
        </div>
      `;
      
      return section;
    }

    // Auto-generate slug from first translation title
    function updateSlugFromTranslations() {
      const firstTitleInput = document.querySelector('input[name^="title-"]') as HTMLInputElement;
      const slugInput = document.querySelector('input[name="slug"]') as HTMLInputElement;
      
      // Only auto-generate if slug field is empty
      if (firstTitleInput && slugInput && firstTitleInput.value && !slugInput.value.trim()) {
        const slug = generateSlugFromTitle(firstTitleInput.value);
        slugInput.value = slug;
        console.log('Auto-generated slug:', slug, 'from title:', firstTitleInput.value);
      }
    }

    // Event listeners for adding translations
    addPolishBtn?.addEventListener('click', () => {
      // Check if Polish translation already exists
      if (document.querySelector('[data-lang="pl"]')) {
        showError('Polish translation already exists');
        return;
      }
      
      const section = createTranslationSection('pl');
      translationsContainer.appendChild(section);
      
      // Add event listener for remove button
      const removeBtn = section.querySelector('.remove-translation-btn');
      removeBtn?.addEventListener('click', () => {
        section.remove();
        updateRemoveButtonsVisibility();
      });
      
      updateRemoveButtonsVisibility();
    });

    addEnglishBtn?.addEventListener('click', () => {
      // Check if English translation already exists
      if (document.querySelector('[data-lang="en"]')) {
        showError('English translation already exists');
        return;
      }
      
      const section = createTranslationSection('en');
      translationsContainer.appendChild(section);
      
      // Add event listener for remove button
      const removeBtn = section.querySelector('.remove-translation-btn');
      removeBtn?.addEventListener('click', () => {
        section.remove();
        updateRemoveButtonsVisibility();
      });
      
      updateRemoveButtonsVisibility();
    });

    // Function to update visibility of remove buttons
    function updateRemoveButtonsVisibility() {
      const translationSections = document.querySelectorAll('.translation-section');
      const removeButtons = document.querySelectorAll('.remove-translation-btn');
      
      // Show remove buttons only if there's more than one translation
      removeButtons.forEach(btn => {
        const btnElement = btn as HTMLButtonElement;
        btnElement.style.display = translationSections.length > 1 ? 'block' : 'none';
      });
      
      // Update add button states
      if (addPolishBtn) {
        addPolishBtn.disabled = !!document.querySelector('[data-lang="pl"]');
      }
      if (addEnglishBtn) {
        addEnglishBtn.disabled = !!document.querySelector('[data-lang="en"]');
      }
    }

    // Set up auto-slug generation for the first title field
    document.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      if (target && target.name && target.name.startsWith('title-')) {
        updateSlugFromTranslations();
      }
    });

    // Initialize remove button visibility
    updateRemoveButtonsVisibility();

    // Utility function to generate slug
    function generateSlugFromTitle(title: string): string {
      if (!title || title.trim().length === 0) {
        return 'untitled-post';
      }
      
      const polishChars: { [key: string]: string } = {
        'ƒÖ': 'a', 'ƒá': 'c', 'ƒô': 'e', '≈Ç': 'l', '≈Ñ': 'n',
        '√≥': 'o', '≈õ': 's', '≈∫': 'z', '≈º': 'z'
      };
      
      let slug = title
        .toLowerCase()
        .trim()
        // Replace Polish characters
        .replace(/[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º]/g, (char) => polishChars[char] || char)
        // Remove special characters except spaces and hyphens
        .replace(/[^a-z0-9\s-]/g, '')
        // Replace spaces with hyphens
        .replace(/\s+/g, '-')
        // Replace multiple hyphens with single hyphen
        .replace(/-+/g, '-')
        // Remove hyphens from start and end
        .replace(/^-|-$/g, '');
      
      // If slug is empty or too short, add prefix
      if (!slug || slug.length < 3) {
        slug = `post-${slug || 'untitled'}`;
      }
      
      console.log('Generated slug:', slug, 'from title:', title);
      return slug;
    }

    // Function to generate unique slug with timestamp only when needed
    function generateUniqueSlug(title: string): string {
      const baseSlug = generateSlugFromTitle(title);
      const timestamp = Date.now().toString().slice(-6);
      return `${baseSlug}-${timestamp}`;
    }

    // Set default language
    // Language is now determined dynamically from the translation sections

    function showError(message: string) {
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
      if (successDiv) {
        successDiv.classList.add('hidden');
      }
    }

    function showSuccess(message: string) {
      if (successDiv) {
        successDiv.textContent = message;
        successDiv.classList.remove('hidden');
      }
      if (errorDiv) {
        errorDiv.classList.add('hidden');
      }
    }

    function hideMessages() {
      if (errorDiv) errorDiv.classList.add('hidden');
      if (successDiv) successDiv.classList.add('hidden');
    }

    // Test backend connection
    async function testBackendConnection() {
      hideMessages();
      
      try {
        console.log('Testing backend connection...');
        
        // Test health endpoint
        const healthResponse = await fetch('http://localhost:8000/api/health', {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Origin': getFrontendUrl()
          }
        });
        
        if (healthResponse.ok) {
          const healthData = await healthResponse.json();
          console.log('Health check passed:', healthData);
          
          // Test auth endpoint
          const token = AdminAuth.getToken();
          if (token) {
            const authResponse = await fetch('http://localhost:8000/api/auth/me', {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Origin': getFrontendUrl()
              }
            });
            
            if (authResponse.ok) {
              const userData = await authResponse.json();
              console.log('Auth test passed:', userData);
              
              // Test blog endpoint access
              const blogResponse = await fetch('http://localhost:8000/api/blog/', {
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Accept': 'application/json',
                  'Origin': getFrontendUrl()
                }
              });
              
              if (blogResponse.ok) {
                const blogData = await blogResponse.json();
                console.log('Blog API test passed:', blogData);
                showSuccess(`‚úÖ Backend fully operational!\nüè• Health: ${healthData.status}\nüë§ User: ${userData.email}\nüìù Blog API: ${blogData.total} posts found`);
              } else {
                throw new Error(`Blog API test failed: ${blogResponse.status}`);
              }
              
            } else {
              throw new Error(`Auth test failed: ${authResponse.status}`);
            }
          } else {
            throw new Error('No auth token found');
          }
        } else {
          throw new Error(`Health check failed: ${healthResponse.status}`);
        }
        
      } catch (error) {
        console.error('Backend test failed:', error);
        let message = 'Backend connection test failed: ';
        
        if (error instanceof TypeError && error.message.includes('NetworkError')) {
          message += 'Network error - check if backend is running on http://localhost:8000';
        } else if (error instanceof Error) {
          message += error.message;
        } else {
          message += 'Unknown error';
        }
        
        showError(message);
      }
    }

    // Flag to prevent concurrent submissions
    let isSubmitting = false;

    async function submitPost(isDraft: boolean) {
      hideMessages();
      
      // Prevent concurrent submissions
      if (isSubmitting) {
        console.log('Submit already in progress, ignoring duplicate call');
        return;
      }
      
      isSubmitting = true;
      
      // Check authentication first
      if (!AdminAuth.isAuthenticated()) {
        showError('You must be logged in to create posts');
        isSubmitting = false;
        return;
      }
      
      // Check if user is admin
      const user = AdminAuth.getCurrentUser();
      if (!user?.is_admin) {
        showError('Only administrators can create blog posts');
        isSubmitting = false;
        return;
      }
      
      // Initialize UI elements
      const activeBtn = isDraft ? saveDraftBtn : publishBtn;
      const activeText = isDraft ? draftText : publishText;
      const originalText = activeText?.textContent || '';

      try {
        const token = AdminAuth.getToken();
        console.log('Auth token:', token ? 'Token present' : 'No token found');
        console.log('User is admin:', user?.is_admin);
        console.log('User details:', user);
        
        // Show loading state
        if (activeBtn) activeBtn.disabled = true;
        if (activeText) activeText.textContent = 'Saving...';
        // Validate required fields - sprawdz czy mamy przynajmniej jedna tradlumaczenie
        const translations = collectTranslations();
        if (translations.length === 0) {
          throw new Error('At least one translation is required');
        }
        
        // Validate that each translation has title and content
        for (const translation of translations) {
          if (!translation.title.trim() || !translation.content.trim()) {
            throw new Error(`Title and content are required for ${translation.language_code} translation`);
          }
          
          // Validate title length
          if (translation.title.length > 200) {
            throw new Error(`Title for ${translation.language_code} cannot be longer than 200 characters`);
          }
        }
        
        // Validate and generate slug
        const slugInput = document.querySelector('input[name="slug"]') as HTMLInputElement;
        let slug = slugInput?.value.trim();
        
        // If no slug provided, generate from first translation title
        if (!slug) {
          slug = generateSlugFromTitle(translations[0].title);
          console.log('Generated slug from title:', slug);
        } else {
          console.log('Using provided slug:', slug);
        }
        
        if (slug.length > 200) {
          throw new Error('Slug cannot be longer than 200 characters');
        }
        if (!/^[a-z0-9-]+$/.test(slug)) {
          throw new Error('Slug can only contain lowercase letters, numbers, and hyphens');
        }
        
        // Validate and process tags (max 10 tags, each max 50 chars)
        const tagsInput = document.querySelector('input[name="tags"]') as HTMLInputElement;
        const tagsArray = tagsInput?.value 
          ? tagsInput.value.split(',')
              .map(tag => tag.trim())
              .filter(tag => tag.length > 0)
              .slice(0, 10)
              .filter(tag => tag.length <= 50)
          : [];

        // Prepare post data according to new API structure
        const authorInput = document.querySelector('input[name="author"]') as HTMLInputElement;
        const categoryInput = document.querySelector('select[name="category"]') as HTMLSelectElement;
        const featuredImageInput = document.querySelector('input[name="featured_image"]') as HTMLInputElement;
        
        const authorName = authorInput?.value.trim() || user.username || user.full_name || user.email?.split('@')[0] || 'KGR33N';
        
        // Try new multilingual API structure first
        const postData = {
          slug: slug,
          author: authorName,
          category: categoryInput?.value || 'general',
          featured_image: featuredImageInput?.value.trim() || undefined,
          tags: tagsArray,
          translations: translations
        };

        console.log('Submitting multilingual post:', postData);
        console.log('Translations being sent:', JSON.stringify(postData.translations, null, 2));
        
        console.log('API URL:', API_URLS.createPost());
        console.log('Is draft mode:', isDraft);
        
        if (!token) {
          throw new Error('No authentication token found. Please login again.');
        }        
        
        console.log('Authorization header will be:', `Bearer ${token.substring(0, 20)}...`);

        // Tworzymy post z wieloma t≈Çumaczeniami
        let response = await fetch(API_URLS.createPost(), {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
            'Origin': getFrontendUrl()
          },
          body: JSON.stringify(postData)
        });

        console.log('Response status:', response.status);
        console.log('Response statusText:', response.statusText);

        // If new API structure fails, try fallback to old structure
        if (!response.ok && response.status === 422) {
          console.log('‚ö†Ô∏è New API structure failed, trying fallback to old structure...');
          
          // Use first translation as main content
          const firstTranslation = translations[0];
          const oldPostData = {
            title: firstTranslation.title,
            slug: slug,
            content: firstTranslation.content,
            excerpt: firstTranslation.excerpt || '',
            author: authorName,
            meta_title: firstTranslation.meta_title || '',
            meta_description: firstTranslation.meta_description || '',
            language: firstTranslation.language_code,
            category: categoryInput?.value || 'general',
            tags: tagsArray,
            featured_image: featuredImageInput?.value.trim() || undefined
          };
          
          console.log('Trying old API structure:', oldPostData);
          
          response = await fetch(API_URLS.createPost(), {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
              'Origin': getFrontendUrl()
            },
            body: JSON.stringify(oldPostData)
          });
          
          console.log('Fallback response status:', response.status);
          console.log('Fallback response statusText:', response.statusText);
        }

        if (!response.ok) {
          const contentType = response.headers.get('content-type');
          let errorData;
          
          try {
            if (contentType && contentType.includes('application/json')) {
              errorData = await response.json();
            } else {
              errorData = { detail: await response.text() };
            }
          } catch (parseError) {
            console.error('Failed to parse error response:', parseError);
            errorData = { detail: `HTTP ${response.status}: ${response.statusText}` };
          }
          
          console.error('Error response:', errorData);
          console.error('Response headers:', Object.fromEntries(response.headers.entries()));
          
          // Handle specific error cases
          if (response.status === 401) {
            throw new Error('Authentication failed. Please login again.');
          } else if (response.status === 403) {
            throw new Error('You do not have permission to create posts. Admin access required.');
          } else if (response.status === 409) {
            // Conflict - slug already exists, throw error with suggestion
            const newSlug = generateUniqueSlug(translations[0]?.title || 'untitled');
            console.log(`Slug conflict detected. Suggested new slug: ${newSlug}`);
            
            // Update the form with suggested slug
            if (slugInput) {
              (slugInput as HTMLInputElement).value = newSlug;
            }
            
            throw new Error(`A post with this slug already exists. A new unique slug has been generated: "${newSlug}". Please try saving again.`);
          } else if (response.status === 422) {
            const validationErrors = errorData.detail;
            if (Array.isArray(validationErrors)) {
              const errorMessages = validationErrors.map((err: { loc: string[]; msg: string }) => `${err.loc.join('.')}: ${err.msg}`);
              throw new Error(`Validation errors: ${errorMessages.join(', ')}`);
            } else {
              throw new Error(errorData.detail || 'Validation failed');
            }
          } else if (response.status === 500) {
            // For 500 errors, provide more context about what might be wrong
            const errorMessage = errorData.detail || 'Server error occurred';
            if (errorMessage.includes('translations') || errorMessage.includes('language_code')) {
              throw new Error(`Server error: The backend might not support the new multilingual API structure yet. Error: ${errorMessage}`);
            } else {
              throw new Error(`Server error occurred: ${errorMessage}. Please check if the backend is running and try again.`);
            }
          } else {
            throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
          }
        }

        const result = await response.json();
        console.log('Post created successfully:', result);

        // Je≈õli chcemy opublikowaƒá post (nie jest draft), wywo≈Çaj endpoint publikacji
        if (!isDraft) {
          try {
            console.log('Publishing post...');
            const publishResponse = await fetch(API_URLS.publishPost(result.id), {
              method: 'PUT',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Origin': getFrontendUrl()
              },
              body: JSON.stringify({})
            });
            
            if (!publishResponse.ok) {
              console.warn('Failed to publish post:', publishResponse.status);
              const publishErrorData = await publishResponse.json().catch(() => ({ detail: 'Unknown publish error' }));
              console.error('Publish error:', publishErrorData);
              throw new Error(`Post created but failed to publish: ${publishErrorData.detail}`);
            } else {
              console.log('Post published successfully');
            }
          } catch (publishError) {
            console.error('Error publishing post:', publishError);
            throw new Error(`Post created successfully but failed to publish: ${publishError instanceof Error ? publishError.message : 'Unknown error'}`);
          }
        }

        const successMessage = isDraft 
          ? 'Post saved as draft successfully!' 
          : 'Post published successfully!';
        
        showSuccess(successMessage);

        // Reset form after success
        setTimeout(() => {
          form?.reset();
          const currentLang = window.location.pathname.split('/')[1];
          window.location.href = `/${currentLang}/admin/dashboard`;
        }, 2000);

      } catch (error) {
        console.error('Error creating post:', error);
        
        let message = 'Failed to create post';
        
        if (error instanceof TypeError && error.message.includes('NetworkError')) {
          message = 'Network error: Cannot connect to the backend server. Please check if the backend is running on http://localhost:8000 and has CORS properly configured.';
        } else if (error instanceof TypeError && error.message.includes('fetch')) {
          message = 'Connection error: Unable to reach the backend server. Please check your internet connection and backend status.';
        } else if (error instanceof Error) {
          message = error.message;
        }
        
        showError(message);
      } finally {
        // Reset button state
        if (activeBtn) activeBtn.disabled = false;
        if (activeText) activeText.textContent = originalText;
        
        // Reset submission flag
        isSubmitting = false;
      }
    }

    // Form submission with duplicate prevention - use data attribute to prevent duplicate listeners
    if (form && !form.dataset.listenerAdded) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitEvent = e as SubmitEvent;
        
        // Prevent double submission
        const submitBtn = submitEvent.submitter as HTMLButtonElement;
        if (submitBtn && submitBtn.disabled) {
          console.log('Submit button already disabled, preventing duplicate submission');
          return;
        }
        
        const submitter = submitEvent.submitter as HTMLButtonElement;
        const action = submitter?.dataset.action;
        const isDraft = action === 'draft';
        
        await submitPost(isDraft);
      });
      
      form.dataset.listenerAdded = 'true';
    }

    // Test backend button - use data attribute to prevent duplicate listeners
    if (testBackendBtn && !testBackendBtn.dataset.listenerAdded) {
      testBackendBtn.addEventListener('click', testBackendConnection);
      testBackendBtn.dataset.listenerAdded = 'true';
    }
  }

  // Prevent duplicate initialization
  let isInitialized = false;
  
  function safeInit() {
    if (!isInitialized) {
      console.log('Initializing create post form for the first time');
      initCreatePost();
      isInitialized = true;
    } else {
      console.log('Form already initialized, skipping duplicate initialization');
    }
  }

  // Initialize on page load and navigation
  document.addEventListener('DOMContentLoaded', safeInit);
  document.addEventListener('astro:page-load', safeInit);
</script>

<style>
  /* Custom styles for the markdown editor */
  #content {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 14px;
    line-height: 1.5;
  }
  
  /* Loading spinner for buttons */
  .btn-loading {
    position: relative;
  }
  
  .btn-loading::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
</style>
