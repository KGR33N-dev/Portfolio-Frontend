---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('admin.createPost'),
  description: t('admin.blogManagement'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<Layout metadata={metadata}>
  <WidgetWrapper 
    id="create-post" 
    containerClass="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8"
  >
    <!-- Header -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div>
          <Headline 
            title={t('admin.createPost')}
            subtitle={t('admin.blogManagement')}
            classes={{
              container: '',
              title: 'text-2xl font-bold text-gray-900 dark:text-white',
              subtitle: 'text-sm text-gray-600 dark:text-gray-400 mt-1'
            }}
          />
        </div>
        <a 
          href={`/${lang}/admin/dashboard`}
          class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 font-medium"
        >
          ‚Üê Dashboard
        </a>
      </div>
    </div>

    <!-- Error/Success Messages -->
    <div id="error-message" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-4 py-3 rounded mb-6">
    </div>
    
    <div id="success-message" class="hidden bg-green-100 dark:bg-green-900/20 border border-green-400 text-green-700 dark:text-green-400 px-4 py-3 rounded mb-6">
    </div>

    <!-- Create Post Form -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
      <form id="create-post-form" class="p-6 space-y-6">
        
        <!-- General Post Settings -->
        <div class="border-b border-gray-200 dark:border-gray-700 pb-6">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">{t('admin.generalSettings')}</h3>
          
          <!-- Slug -->
          <div class="mb-6">
            <label for="slug" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postSlugRequired')}
            </label>
            <input 
              id="slug" 
              name="slug" 
              type="text" 
              required 
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('admin.postSlugPlaceholder')}
            />
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.urlSlugDescription')}</p>
          </div>

          <!-- Author and Category Row -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <label for="author" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.author')}
              </label>
              <input 
                id="author" 
                name="author" 
                type="text" 
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                placeholder={t('admin.authorPlaceholder')}
              />
            </div>

            <div>
              <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.category')}
              </label>
              <select 
                id="category" 
                name="category" 
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              >
                <option value="">{t('admin.selectCategory')}</option>
                <option value="programming">Programming</option>
                <option value="tutorial">Tutorial</option>
                <option value="technology">Technology</option>
                <option value="web-development">Web Development</option>
                <option value="backend">Backend</option>
                <option value="python">Python</option>
                <option value="fastapi">FastAPI</option>
                <option value="astro">Astro</option>
                <option value="gamedev">GameDev</option>
                <option value="general">General</option>
              </select>
            </div>
          </div>

          <!-- Featured Image -->
          <div class="mb-6">
            <label for="featured_image" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.featuredImage')}
            </label>
            <input 
              id="featured_image" 
              name="featured_image" 
              type="url" 
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('admin.imageUrlPlaceholder')}
            />
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.featuredImageDescription')}</p>
          </div>

          <!-- Tags -->
          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postTags')}
            </label>
            <input 
              id="tags" 
              name="tags" 
              type="text" 
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('admin.tagsPlaceholder')}
            />
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.separateTagsComma')}</p>
          </div>
        </div>

        <!-- Translation Management -->
        <div>
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">{t('admin.translations')}</h3>
            <div id="translation-status" class="text-sm text-gray-600 dark:text-gray-400">
              Loading languages...
            </div>
          </div>

          <!-- Translation sections will be added here dynamically -->
          <div id="translations-container" class="space-y-6">
            <!-- Loading state -->
            <div id="loading-languages" class="text-center py-8">
              <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2"></div>
              <span class="text-gray-600 dark:text-gray-400">Loading available languages...</span>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200 dark:border-gray-700">
          <!-- Debug button for testing backend connection -->
          <button 
            type="button" 
            id="test-backend-btn"
            class="px-4 py-2 text-sm bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors"
          >
            {t('admin.testBackendConnection')}
          </button>
          
          <button 
            type="submit" 
            id="save-draft-btn"
            data-action="draft"
            class="flex-1 flex items-center justify-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            <span id="draft-text">{t('admin.savePost')} ({t('admin.draft')})</span>
          </button>
          
          <button 
            type="submit" 
            id="publish-btn"
            data-action="publish"
            class="flex-1 flex items-center justify-center px-6 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            <span id="publish-text">{t('admin.publishPost')}</span>
          </button>
        </div>
      </form>
    </div>

    <!-- Access Denied Message (hidden by default) -->
    <div id="access-denied" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-6 py-4 rounded-lg text-center">
      <h3 class="font-semibold text-lg mb-2">{t('admin.accessDenied')}</h3>
      <p class="mb-4">You need to be logged in as an administrator to create posts.</p>
      <a href={`/${lang}/login`} class="inline-block px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
        Go to Login
      </a>
    </div>
  </WidgetWrapper>
</Layout>

<script>
  import { AdminAuth } from '../../../utils/adminAuth.js';
  import { API_URLS, getFrontendUrl } from '../../../config/api.js';
  import { LanguageAPI } from '../../../utils/languageAPI.js';
  
  async function initCreatePost() {
    // Check authentication first
    if (!AdminAuth.isAuthenticated()) {
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/login`;
      return;
    }

    // Check if user is admin
    const user = AdminAuth.getCurrentUser();
    if (!user?.is_admin) {
      const accessDeniedDiv = document.getElementById('access-denied');
      const createPostContent = document.getElementById('create-post');
      
      if (accessDeniedDiv) {
        accessDeniedDiv.classList.remove('hidden');
      }
      if (createPostContent) {
        createPostContent.style.display = 'none';
      }
      return;
    }

    const form = document.getElementById('create-post-form') as HTMLFormElement;
    
    const saveDraftBtn = document.getElementById('save-draft-btn') as HTMLButtonElement;
    const publishBtn = document.getElementById('publish-btn') as HTMLButtonElement;
    const testBackendBtn = document.getElementById('test-backend-btn') as HTMLButtonElement;
    const draftText = document.getElementById('draft-text') as HTMLSpanElement;
    const publishText = document.getElementById('publish-text') as HTMLSpanElement;
    
    const errorDiv = document.getElementById('error-message') as HTMLDivElement;
    const successDiv = document.getElementById('success-message') as HTMLDivElement;
    
    // Set the author field to the logged-in user's username (nickname)
    const authorInput = document.getElementById('author') as HTMLInputElement;
    if (authorInput && !authorInput.value) {
      const defaultAuthor = user.username || user.full_name || user.email?.split('@')[0] || '';
      authorInput.value = defaultAuthor;
      authorInput.placeholder = `Default: ${defaultAuthor || 'Enter author name'}`;
    }
    
    const translationsContainer = document.getElementById('translations-container') as HTMLDivElement;
    const translationStatus = document.getElementById('translation-status') as HTMLDivElement;
    const loadingDiv = document.getElementById('loading-languages') as HTMLDivElement;

    // Load available languages from the system
    interface SimpleLanguage {
      code: string;
      name: string;
      native_name: string;
      is_active: boolean;
    }
    
    let availableLanguages: SimpleLanguage[] = [];
    let requiredLanguages: SimpleLanguage[] = [];
    
    try {
      console.log('Loading languages from system...');
      availableLanguages = await LanguageAPI.getLanguages(true); // Only active languages
      requiredLanguages = availableLanguages.filter(lang => lang.is_active);
      
      console.log('Available active languages:', availableLanguages);
      console.log('Required languages for posts:', requiredLanguages);
      
      if (requiredLanguages.length === 0) {
        throw new Error('No active languages found in the system. Please activate at least one language in Language Management.');
      }
      
      // Update status
      if (translationStatus) {
        translationStatus.textContent = `Required translations: ${requiredLanguages.length} languages`;
      }
      
      // Create translation sections for all required languages
      await createAllTranslationSections();
      
    } catch (error) {
      console.error('Error loading languages:', error);
      showError(`Failed to load languages: ${error instanceof Error ? error.message : 'Unknown error'}`);
      
      // Fallback to default languages if API fails
      console.log('Using fallback default languages');
      requiredLanguages = [
        { code: 'en', name: 'English', native_name: 'English', is_active: true },
        { code: 'pl', name: 'Polish', native_name: 'Polski', is_active: true }
      ];
      
      if (translationStatus) {
        translationStatus.textContent = `Using fallback languages: ${requiredLanguages.length} languages`;
      }
      
      await createAllTranslationSections();
    }

    // Function to get language flag emoji
    function getLanguageFlag(code: string): string {
      const flags: { [key: string]: string } = {
        'pl': 'üáµüá±',
        'en': 'üá∫üá∏',
        'de': 'üá©üá™',
        'fr': 'üá´üá∑',
        'es': 'üá™üá∏',
        'it': 'üáÆüáπ',
        'pt': 'üáµüáπ',
        'ru': 'üá∑üá∫',
        'zh': 'üá®üá≥',
        'ja': 'üáØüáµ',
        'ko': 'üá∞üá∑'
      };
      return flags[code.toLowerCase()] || 'üåê';
    }

    // Function to create all required translation sections
    async function createAllTranslationSections() {
      if (!translationsContainer) return;
      
      // Clear loading state
      if (loadingDiv) {
        loadingDiv.remove();
      }
      
      // Clear existing sections
      translationsContainer.innerHTML = '';
      
      // Create sections for all required languages
      for (const language of requiredLanguages) {
        const section = createTranslationSection(language);
        translationsContainer.appendChild(section);
      }
      
      console.log(`Created translation sections for ${requiredLanguages.length} languages:`, 
                  requiredLanguages.map(l => l.code));
    }

    // Function to create a translation section for a specific language
    function createTranslationSection(language: SimpleLanguage): HTMLElement {
      const { code, name, native_name } = language;
      const flag = getLanguageFlag(code);
      
      const section = document.createElement('div');
      section.className = 'translation-section border border-gray-200 dark:border-gray-700 rounded-lg p-6';
      section.setAttribute('data-lang', code);
      
      section.innerHTML = `
        <div class="flex justify-between items-center mb-4">
          <h4 class="text-md font-medium text-gray-900 dark:text-white flex items-center">
            <span class="text-2xl mr-2">${flag}</span>
            <span>${native_name} (${name}) *</span>
            <span class="ml-2 text-xs bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400 px-2 py-1 rounded">Required</span>
          </h4>
          <div class="text-xs text-gray-500 dark:text-gray-400">
            Language: ${code.toUpperCase()}
          </div>
        </div>

        <div class="space-y-4">
          <!-- Title -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Title * <span class="text-xs text-gray-500">(${native_name})</span>
            </label>
            <input 
              name="title-${code}" 
              type="text" 
              required 
              data-lang="${code}"
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder="Enter post title in ${native_name}..."
            />
          </div>

          <!-- Excerpt -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Excerpt <span class="text-xs text-gray-500">(${native_name})</span>
            </label>
            <textarea 
              name="excerpt-${code}"
              rows="3"
              data-lang="${code}"
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder="Brief description of the post in ${native_name}..."
            ></textarea>
          </div>

          <!-- Content -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Content * <span class="text-xs text-gray-500">(${native_name})</span>
            </label>
            <div class="relative">
              <textarea 
                name="content-${code}"
                rows="20"
                required
                data-lang="${code}"
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors resize-y min-h-[500px]"
                placeholder="Write your post content here in ${native_name}... (Markdown supported)"
              ></textarea>
              <div class="absolute bottom-3 right-3 text-xs text-gray-400 dark:text-gray-500 bg-white dark:bg-slate-900 px-2 py-1 rounded">
                Markdown supported
              </div>
            </div>
          </div>

          <!-- Meta fields -->
          <details class="border border-gray-200 dark:border-gray-700 rounded-lg">
            <summary class="px-4 py-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-800 font-medium">
              SEO Settings for ${native_name} (Optional)
            </summary>
            <div class="px-4 pb-4 space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Meta Title <span class="text-xs text-gray-500">(${native_name})</span>
                </label>
                <input 
                  name="meta_title-${code}"
                  type="text" 
                  data-lang="${code}"
                  class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                  placeholder="SEO title in ${native_name} (leave empty to use post title)"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Meta Description <span class="text-xs text-gray-500">(${native_name})</span>
                </label>
                <textarea 
                  name="meta_description-${code}"
                  rows="2"
                  data-lang="${code}"
                  class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
                  placeholder="SEO description in ${native_name} (leave empty to use excerpt)"
                ></textarea>
              </div>
            </div>
          </details>
        </div>
      `;
      
      return section;
    }

    // Function to collect all translations from form - now validates required languages
    function collectTranslations(): Array<{
      language_code: string;
      title: string;
      content: string;
      excerpt: string;
      meta_title: string;
      meta_description: string;
    }> {
      const translations: Array<{
        language_code: string;
        title: string;
        content: string;
        excerpt: string;
        meta_title: string;
        meta_description: string;
      }> = [];
      
      const missingLanguages: string[] = [];
      
      // Validate that we have translations for all required languages
      for (const requiredLang of requiredLanguages) {
        const section = document.querySelector(`[data-lang="${requiredLang.code}"]`);
        if (!section) {
          missingLanguages.push(requiredLang.native_name);
          continue;
        }
        
        const titleInput = section.querySelector(`input[name="title-${requiredLang.code}"]`) as HTMLInputElement;
        const excerptInput = section.querySelector(`textarea[name="excerpt-${requiredLang.code}"]`) as HTMLTextAreaElement;
        const contentInput = section.querySelector(`textarea[name="content-${requiredLang.code}"]`) as HTMLTextAreaElement;
        const metaTitleInput = section.querySelector(`input[name="meta_title-${requiredLang.code}"]`) as HTMLInputElement;
        const metaDescInput = section.querySelector(`textarea[name="meta_description-${requiredLang.code}"]`) as HTMLTextAreaElement;
        
        // Check if required fields are filled
        if (!titleInput?.value.trim() || !contentInput?.value.trim()) {
          missingLanguages.push(`${requiredLang.native_name} (missing title or content)`);
          continue;
        }
        
        translations.push({
          language_code: requiredLang.code,
          title: titleInput.value.trim(),
          content: contentInput.value.trim(),
          excerpt: excerptInput?.value.trim() || '',
          meta_title: metaTitleInput?.value.trim() || '',
          meta_description: metaDescInput?.value.trim() || ''
        });
      }
      
      // Show error if any required languages are missing
      if (missingLanguages.length > 0) {
        const errorMessage = `Missing translations for: ${missingLanguages.join(', ')}. All active languages require translations.`;
        showError(errorMessage);
        return [];
      }
      
      console.log(`Collected ${translations.length} translations for required languages:`, 
                  translations.map(t => t.language_code));
      
      return translations;
    }

    // Auto-generate slug from first translation title
    function updateSlugFromTranslations() {
      const firstTitleInput = document.querySelector('input[name^="title-"]') as HTMLInputElement;
      const slugInput = document.querySelector('input[name="slug"]') as HTMLInputElement;
      
      // Only auto-generate if slug field is empty
      if (firstTitleInput && slugInput && firstTitleInput.value && !slugInput.value.trim()) {
        const slug = generateSlugFromTitle(firstTitleInput.value);
        slugInput.value = slug;
        console.log('Auto-generated slug:', slug, 'from title:', firstTitleInput.value);
      }
    }

    // Set up auto-slug generation for title fields
    document.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      if (target && target.name && target.name.startsWith('title-')) {
        updateSlugFromTranslations();
      }
    });

    // Utility function to generate slug
    function generateSlugFromTitle(title: string): string {
      if (!title || title.trim().length === 0) {
        return 'untitled-post';
      }
      
      const polishChars: { [key: string]: string } = {
        'ƒÖ': 'a', 'ƒá': 'c', 'ƒô': 'e', '≈Ç': 'l', '≈Ñ': 'n',
        '√≥': 'o', '≈õ': 's', '≈∫': 'z', '≈º': 'z'
      };
      
      let slug = title
        .toLowerCase()
        .trim()
        // Replace Polish characters
        .replace(/[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º]/g, (char) => polishChars[char] || char)
        // Remove special characters except spaces and hyphens
        .replace(/[^a-z0-9\s-]/g, '')
        // Replace spaces with hyphens
        .replace(/\s+/g, '-')
        // Replace multiple hyphens with single hyphen
        .replace(/-+/g, '-')
        // Remove hyphens from start and end
        .replace(/^-|-$/g, '');
      
      // If slug is empty or too short, add prefix
      if (!slug || slug.length < 3) {
        slug = `post-${slug || 'untitled'}`;
      }
      
      console.log('Generated slug:', slug, 'from title:', title);
      return slug;
    }

    // Function to generate unique slug with timestamp only when needed
    function generateUniqueSlug(title: string): string {
      const baseSlug = generateSlugFromTitle(title);
      const timestamp = Date.now().toString().slice(-6);
      return `${baseSlug}-${timestamp}`;
    }

    // Set default language
    // Language is now determined dynamically from the translation sections

    function showError(message: string) {
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
      if (successDiv) {
        successDiv.classList.add('hidden');
      }
    }

    function showSuccess(message: string) {
      if (successDiv) {
        successDiv.textContent = message;
        successDiv.classList.remove('hidden');
      }
      if (errorDiv) {
        errorDiv.classList.add('hidden');
      }
    }

    function hideMessages() {
      if (errorDiv) errorDiv.classList.add('hidden');
      if (successDiv) successDiv.classList.add('hidden');
    }

    // Test backend connection
    async function testBackendConnection() {
      hideMessages();
      
      try {
        console.log('Testing backend connection...');
        
        // Test health endpoint
        const healthResponse = await fetch('http://localhost:8000/api/health', {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Origin': getFrontendUrl()
          }
        });
        
        if (healthResponse.ok) {
          const healthData = await healthResponse.json();
          console.log('Health check passed:', healthData);
          
          // Test auth endpoint
          const token = AdminAuth.getToken();
          if (token) {
            const authResponse = await fetch('http://localhost:8000/api/auth/me', {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Origin': getFrontendUrl()
              }
            });
            
            if (authResponse.ok) {
              const userData = await authResponse.json();
              console.log('Auth test passed:', userData);
              
              // Test blog endpoint access
              const blogResponse = await fetch('http://localhost:8000/api/blog/', {
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Accept': 'application/json',
                  'Origin': getFrontendUrl()
                }
              });
              
              if (blogResponse.ok) {
                const blogData = await blogResponse.json();
                console.log('Blog API test passed:', blogData);
                showSuccess(`‚úÖ Backend fully operational!\nüè• Health: ${healthData.status}\nüë§ User: ${userData.email}\nüìù Blog API: ${blogData.total} posts found`);
              } else {
                throw new Error(`Blog API test failed: ${blogResponse.status}`);
              }
              
            } else {
              throw new Error(`Auth test failed: ${authResponse.status}`);
            }
          } else {
            throw new Error('No auth token found');
          }
        } else {
          throw new Error(`Health check failed: ${healthResponse.status}`);
        }
        
      } catch (error) {
        console.error('Backend test failed:', error);
        let message = 'Backend connection test failed: ';
        
        if (error instanceof TypeError && error.message.includes('NetworkError')) {
          message += 'Network error - check if backend is running on http://localhost:8000';
        } else if (error instanceof Error) {
          message += error.message;
        } else {
          message += 'Unknown error';
        }
        
        showError(message);
      }
    }

    // Flag to prevent concurrent submissions
    let isSubmitting = false;

    async function submitPost(isDraft: boolean) {
      hideMessages();
      
      // Prevent concurrent submissions
      if (isSubmitting) {
        console.log('Submit already in progress, ignoring duplicate call');
        return;
      }
      
      isSubmitting = true;
      
      // Check authentication first
      if (!AdminAuth.isAuthenticated()) {
        showError('You must be logged in to create posts');
        isSubmitting = false;
        return;
      }
      
      // Check if user is admin
      const user = AdminAuth.getCurrentUser();
      if (!user?.is_admin) {
        showError('Only administrators can create blog posts');
        isSubmitting = false;
        return;
      }
      
      // Initialize UI elements
      const activeBtn = isDraft ? saveDraftBtn : publishBtn;
      const activeText = isDraft ? draftText : publishText;
      const originalText = activeText?.textContent || '';

      try {
        const token = AdminAuth.getToken();
        console.log('Auth token:', token ? 'Token present' : 'No token found');
        console.log('User is admin:', user?.is_admin);
        console.log('User details:', user);
        
        // Show loading state
        if (activeBtn) activeBtn.disabled = true;
        if (activeText) activeText.textContent = 'Saving...';
        // Validate required fields - all active languages must have translations
        const translations = collectTranslations();
        if (translations.length === 0) {
          throw new Error('Translations are required for all active languages');
        }
        
        // Validate that we have all required languages
        if (translations.length !== requiredLanguages.length) {
          const missingLangs = requiredLanguages
            .filter(reqLang => !translations.some(t => t.language_code === reqLang.code))
            .map(lang => lang.native_name);
          
          throw new Error(`Missing translations for: ${missingLangs.join(', ')}`);
        }
        
        // Validate that each translation has title and content
        for (const translation of translations) {
          if (!translation.title.trim() || !translation.content.trim()) {
            const langName = requiredLanguages.find(l => l.code === translation.language_code)?.native_name || translation.language_code;
            throw new Error(`Title and content are required for ${langName} translation`);
          }
          
          // Validate title length
          if (translation.title.length > 200) {
            const langName = requiredLanguages.find(l => l.code === translation.language_code)?.native_name || translation.language_code;
            throw new Error(`Title for ${langName} cannot be longer than 200 characters`);
          }
        }
        
        // Validate and generate slug
        const slugInput = document.querySelector('input[name="slug"]') as HTMLInputElement;
        let slug = slugInput?.value.trim();
        
        // If no slug provided, generate from first translation title
        if (!slug) {
          slug = generateSlugFromTitle(translations[0].title);
          console.log('Generated slug from title:', slug);
        } else {
          console.log('Using provided slug:', slug);
        }
        
        if (slug.length > 200) {
          throw new Error('Slug cannot be longer than 200 characters');
        }
        if (!/^[a-z0-9-]+$/.test(slug)) {
          throw new Error('Slug can only contain lowercase letters, numbers, and hyphens');
        }
        
        // Validate and process tags (max 10 tags, each max 50 chars)
        const tagsInput = document.querySelector('input[name="tags"]') as HTMLInputElement;
        const tagsArray = tagsInput?.value 
          ? tagsInput.value.split(',')
              .map(tag => tag.trim())
              .filter(tag => tag.length > 0)
              .slice(0, 10)
              .filter(tag => tag.length <= 50)
          : [];

        // Prepare post data according to new API structure
        const authorInput = document.querySelector('input[name="author"]') as HTMLInputElement;
        const categoryInput = document.querySelector('select[name="category"]') as HTMLSelectElement;
        const featuredImageInput = document.querySelector('input[name="featured_image"]') as HTMLInputElement;
        
        // Use logged-in user's nickname (username) as author, with fallbacks
        const authorName = authorInput?.value.trim() || user.username || user.full_name || user.email?.split('@')[0] || 'Anonymous';
        
        // Build post data according to the new multilingual API structure
        const postData = {
          slug: slug,
          author: authorName,
          category: categoryInput?.value || 'general',
          featured_image: featuredImageInput?.value.trim() || undefined,
          tags: tagsArray,
          translations: translations
        };

        console.log('Submitting multilingual post:', postData);
        console.log('Translations being sent:', JSON.stringify(postData.translations, null, 2));
        
        console.log('API URL:', API_URLS.createPost());
        console.log('Is draft mode:', isDraft);
        
        if (!token) {
          throw new Error('No authentication token found. Please login again.');
        }        
        
        console.log('Authorization header will be:', `Bearer ${token.substring(0, 20)}...`);

        // Create post using new multilingual API structure
        const response = await fetch(API_URLS.createPost(), {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
            'Origin': getFrontendUrl()
          },
          body: JSON.stringify(postData)
        });

        console.log('Response status:', response.status);
        console.log('Response statusText:', response.statusText);

        if (!response.ok) {
          const contentType = response.headers.get('content-type');
          let errorData;
          
          try {
            if (contentType && contentType.includes('application/json')) {
              errorData = await response.json();
            } else {
              errorData = { detail: await response.text() };
            }
          } catch (parseError) {
            console.error('Failed to parse error response:', parseError);
            errorData = { detail: `HTTP ${response.status}: ${response.statusText}` };
          }
          
          console.error('Error response:', errorData);
          console.error('Response headers:', Object.fromEntries(response.headers.entries()));
          
          // Handle specific error cases
          if (response.status === 401) {
            throw new Error('Authentication failed. Please login again.');
          } else if (response.status === 403) {
            throw new Error('You do not have permission to create posts. Admin access required.');
          } else if (response.status === 409) {
            // Conflict - slug already exists, throw error with suggestion
            const newSlug = generateUniqueSlug(translations[0]?.title || 'untitled');
            console.log(`Slug conflict detected. Suggested new slug: ${newSlug}`);
            
            // Update the form with suggested slug
            if (slugInput) {
              (slugInput as HTMLInputElement).value = newSlug;
            }
            
            throw new Error(`A post with this slug already exists. A new unique slug has been generated: "${newSlug}". Please try saving again.`);
          } else if (response.status === 422) {
            const validationErrors = errorData.detail;
            if (Array.isArray(validationErrors)) {
              const errorMessages = validationErrors.map((err: { loc: string[]; msg: string }) => `${err.loc.join('.')}: ${err.msg}`);
              throw new Error(`Validation errors: ${errorMessages.join(', ')}`);
            } else {
              throw new Error(errorData.detail || 'Validation failed');
            }
          } else if (response.status === 400) {
            // Handle specific API validation errors (e.g., invalid language codes)
            throw new Error(errorData.detail || 'Invalid data provided');
          } else if (response.status === 500) {
            throw new Error(`Server error occurred: ${errorData.detail || 'Unknown server error'}. Please try again.`);
          } else {
            throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
          }
        }

        const result = await response.json();
        console.log('Post created successfully:', result);

        // If we want to publish the post (not draft), call the publish endpoint
        if (!isDraft) {
          try {
            console.log('Publishing post...');
            const publishResponse = await fetch(API_URLS.publishPost(result.id), {
              method: 'PUT',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Origin': getFrontendUrl()
              }
            });
            
            if (!publishResponse.ok) {
              const publishErrorData = await publishResponse.json().catch(() => ({ detail: 'Unknown publish error' }));
              console.error('Publish error:', publishErrorData);
              throw new Error(`Post created but failed to publish: ${publishErrorData.detail}`);
            } else {
              const publishResult = await publishResponse.json();
              console.log('Post published successfully:', publishResult);
            }
          } catch (publishError) {
            console.error('Error publishing post:', publishError);
            throw new Error(`Post created successfully but failed to publish: ${publishError instanceof Error ? publishError.message : 'Unknown error'}`);
          }
        }

        const successMessage = isDraft 
          ? 'Post saved as draft successfully!' 
          : 'Post published successfully!';
        
        showSuccess(successMessage);

        // Reset form after success
        setTimeout(() => {
          form?.reset();
          const currentLang = window.location.pathname.split('/')[1];
          window.location.href = `/${currentLang}/admin/dashboard`;
        }, 2000);

      } catch (error) {
        console.error('Error creating post:', error);
        
        let message = 'Failed to create post';
        
        if (error instanceof TypeError && error.message.includes('NetworkError')) {
          message = 'Network error: Cannot connect to the backend server. Please check if the backend is running on http://localhost:8000 and has CORS properly configured.';
        } else if (error instanceof TypeError && error.message.includes('fetch')) {
          message = 'Connection error: Unable to reach the backend server. Please check your internet connection and backend status.';
        } else if (error instanceof Error) {
          message = error.message;
        }
        
        showError(message);
      } finally {
        // Reset button state
        if (activeBtn) activeBtn.disabled = false;
        if (activeText) activeText.textContent = originalText;
        
        // Reset submission flag
        isSubmitting = false;
      }
    }

    // Form submission with duplicate prevention - use data attribute to prevent duplicate listeners
    if (form && !form.dataset.listenerAdded) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitEvent = e as SubmitEvent;
        
        // Prevent double submission
        const submitBtn = submitEvent.submitter as HTMLButtonElement;
        if (submitBtn && submitBtn.disabled) {
          console.log('Submit button already disabled, preventing duplicate submission');
          return;
        }
        
        const submitter = submitEvent.submitter as HTMLButtonElement;
        const action = submitter?.dataset.action;
        const isDraft = action === 'draft';
        
        await submitPost(isDraft);
      });
      
      form.dataset.listenerAdded = 'true';
    }

    // Test backend button - use data attribute to prevent duplicate listeners
    if (testBackendBtn && !testBackendBtn.dataset.listenerAdded) {
      testBackendBtn.addEventListener('click', testBackendConnection);
      testBackendBtn.dataset.listenerAdded = 'true';
    }
  }

  // Prevent duplicate initialization
  let isInitialized = false;
  
  function safeInit() {
    if (!isInitialized) {
      console.log('Initializing create post form for the first time');
      initCreatePost();
      isInitialized = true;
    } else {
      console.log('Form already initialized, skipping duplicate initialization');
    }
  }

  // Initialize on page load and navigation
  document.addEventListener('DOMContentLoaded', safeInit);
  document.addEventListener('astro:page-load', safeInit);
</script>

<style>
  /* Custom styles for the markdown editor */
  #content {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 14px;
    line-height: 1.5;
  }
  
  /* Loading spinner for buttons */
  .btn-loading {
    position: relative;
  }
  
  .btn-loading::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
</style>
