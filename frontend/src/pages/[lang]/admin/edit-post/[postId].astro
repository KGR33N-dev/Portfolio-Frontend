---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

// This page should be rendered on-demand (SSR) for admin functionality
export const prerender = false;

const { lang, postId } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

// Validate language
if (!lang || !Object.keys(languages).includes(lang)) {
  return Astro.redirect('/404');
}

// Validate postId
if (!postId || isNaN(parseInt(postId))) {
  return Astro.redirect('/404');
}

const metadata = {
  title: t('admin.editPost'),
  description: t('admin.editPostSubtitle'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<!-- Import required modules in head for global availability -->
<script>
  import '~/config/api';
  import '~/utils/adminAuth';
  import '~/utils/languageAPI';
</script>

<Layout metadata={metadata}>
  <WidgetWrapper 
    id="edit-post" 
    containerClass="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8"
  >
    <!-- Header -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div>
          <Headline 
            title={t('admin.editPost')}
            subtitle={t('admin.editPostSubtitle')}
            classes={{
              container: '',
              title: 'text-2xl font-bold text-gray-900 dark:text-white',
              subtitle: 'text-sm text-gray-600 dark:text-gray-400 mt-1'
            }}
          />
        </div>
        <div class="flex space-x-2">
          <a 
            href={`/${lang}/admin/dashboard`}
            class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 font-medium"
          >
            ‚Üê {t('admin.backToDashboard')}
          </a>
          <button 
            id="preview-post-btn"
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200 font-medium"
            style="display: none;"
          >
            {t('admin.preview')}
          </button>
        </div>
      </div>
    </div>

    <!-- Loading State -->
    <div id="loading-post" class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-8 text-center">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-400">{t('admin.loadingPost')}</p>
    </div>

    <!-- Error State -->
    <div id="error-loading" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-6 py-4 rounded-lg text-center">
      <h3 class="font-semibold text-lg mb-2">{t('admin.errorLoadingPost')}</h3>
      <p class="mb-4" id="error-loading-message"></p>
      <button 
        onclick="window.location.reload()" 
        class="inline-block px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200"
      >
        {t('admin.tryAgain')}
      </button>
    </div>

    <!-- Edit Form -->
    <div id="edit-form-container" class="hidden">
      <!-- Post Status Header -->
      <div id="post-status-header" class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-6">
        <div class="px-6 py-4 flex justify-between items-center">
          <div class="flex items-center space-x-4">
            <div class="flex items-center">
              <span class="text-sm text-gray-600 dark:text-gray-400 mr-2">{t('admin.postStatus')}:</span>
              <span id="post-status-badge" class="px-2 py-1 rounded-full text-xs font-medium"></span>
            </div>
            <div class="flex items-center">
              <span class="text-sm text-gray-600 dark:text-gray-400 mr-2">{t('admin.createdAt')}:</span>
              <span id="post-created-date" class="text-sm font-medium text-gray-900 dark:text-white"></span>
            </div>
            <div id="post-published-date-container" class="flex items-center" style="display: none;">
              <span class="text-sm text-gray-600 dark:text-gray-400 mr-2">{t('admin.publishedAt')}:</span>
              <span id="post-published-date" class="text-sm font-medium text-gray-900 dark:text-white"></span>
            </div>
          </div>
          <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-600 dark:text-gray-400">Slug:</span>
            <span id="post-slug-display" class="text-sm font-mono bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded"></span>
          </div>
        </div>
      </div>

      <!-- Main Form -->
      <form id="edit-post-form" class="space-y-8">
        <!-- Basic Post Information -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-6">{t('admin.basicInfo')}</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Slug (readonly) -->
            <div>
              <label for="slug" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.postSlug')}
              </label>
              <input
                type="text"
                id="slug"
                name="slug"
                readonly
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none cursor-not-allowed"
              />
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.slugCannotBeChanged')}</p>
            </div>

            <!-- Author -->
            <div>
              <label for="author" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.author')}
              </label>
              <input
                type="text"
                id="author"
                name="author"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <!-- Category -->
            <div>
              <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.postCategory')}
              </label>
              <select
                id="category"
                name="category"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="general">General</option>
                <option value="gamedev">Game Development</option>
                <option value="python">Python</option>
                <option value="javascript">JavaScript</option>
                <option value="tutorial">Tutorial</option>
                <option value="web">Web Development</option>
                <option value="mobile">Mobile Development</option>
                <option value="ai">Artificial Intelligence</option>
                <option value="devops">DevOps</option>
                <option value="design">Design</option>
                <option value="career">Career</option>
                <option value="tools">Tools & Resources</option>
              </select>
            </div>

            <!-- Featured Image -->
            <div>
              <label for="featured_image" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                {t('admin.postImage')}
              </label>
              <input
                type="url"
                id="featured_image"
                name="featured_image"
                placeholder={t('admin.imageUrlPlaceholder')}
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          <!-- Tags -->
          <div class="mt-6">
            <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('admin.postTags')}
            </label>
            <input
              type="text"
              id="tags"
              name="tags"
              placeholder={t('admin.tagsPlaceholder')}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{t('admin.tagsHint')}</p>
          </div>
        </div>

        <!-- Translation Management -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <div class="flex justify-between items-center mb-6">
            <div>
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.translations')}</h3>
              <p id="translation-status" class="text-sm text-gray-600 dark:text-gray-400 mt-1"></p>
            </div>
            <div class="flex space-x-2">
              <select id="add-language-select" class="text-sm border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 bg-white dark:bg-slate-800 text-gray-900 dark:text-white">
                <option value="">{t('admin.selectLanguageToAdd')}</option>
              </select>
              <button type="button" id="add-translation-btn" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors duration-200">
                + {t('admin.addTranslation')}
              </button>
            </div>
          </div>

          <!-- Translation Tabs -->
          <div id="translation-tabs" class="flex flex-wrap gap-2 mb-6 border-b border-gray-200 dark:border-gray-700">
            <!-- Translation tabs will be dynamically generated -->
          </div>

          <!-- Translation Forms Container -->
          <div id="translations-container">
            <!-- Translation forms will be dynamically generated -->
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <div class="flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0 sm:space-x-4">
            <!-- Primary Actions -->
            <div class="flex flex-wrap gap-4">
              <button 
                type="submit" 
                id="save-changes-btn"
                data-action="save"
                class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors duration-200 flex items-center"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <span id="save-text">{t('admin.saveChanges')}</span>
              </button>

              <button 
                type="submit" 
                id="publish-btn"
                data-action="publish"
                class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors duration-200 flex items-center"
                style="display: none;"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span id="publish-text">{t('admin.publishPost')}</span>
              </button>

              <button 
                type="submit" 
                id="unpublish-btn"
                data-action="unpublish"
                class="px-6 py-3 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg font-medium transition-colors duration-200 flex items-center"
                style="display: none;"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                </svg>
                <span id="unpublish-text">{t('admin.unpublishPost')}</span>
              </button>
            </div>

            <!-- Secondary Actions -->
            <div class="flex flex-wrap gap-4">
              <button 
                type="button" 
                id="delete-post-btn"
                class="px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors duration-200 flex items-center"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                {t('admin.deletePost')}
              </button>
            </div>
          </div>

          <!-- Auto-save indicator -->
          <div id="autosave-indicator" class="mt-4 text-center hidden">
            <span class="text-sm text-green-600 dark:text-green-400">
              ‚úì {t('admin.autoSaved')} <span id="last-saved-time"></span>
            </span>
          </div>
        </div>
      </form>
    </div>

    <!-- Success/Error Messages -->
    <div id="success-message" class="hidden bg-green-100 dark:bg-green-900/20 border border-green-400 text-green-700 dark:text-green-400 px-6 py-4 rounded-lg mb-6"></div>
    <div id="error-message" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-6 py-4 rounded-lg mb-6"></div>

    <!-- Access Denied Message -->
    <div id="access-denied" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-6 py-4 rounded-lg text-center">
      <h3 class="font-semibold text-lg mb-2">{t('admin.accessDenied')}</h3>
      <p class="mb-4">{t('admin.adminAccessRequired')}</p>
      <a href={`/${lang}/login`} class="inline-block px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
        {t('admin.goToLogin')}
      </a>
    </div>
  </WidgetWrapper>
</Layout>

<script define:vars={{ 
  astroPostId: postId,
  postIdNumber: postId ? parseInt(postId, 10) : null,
  translations: {
    loadingPost: t('admin.loadingPost'),
    errorLoadingPost: t('admin.errorLoadingPost'),
    saveChanges: t('admin.saveChanges'),
    savingChanges: t('admin.savingChanges'),
    publishingPost: t('admin.publishingPost'),
    unpublishingPost: t('admin.unpublishingPost'),
    postUpdatedSuccessfully: t('admin.postUpdatedSuccessfully'),
    postPublishedSuccessfully: t('admin.postPublishedSuccessfully'),
    postUnpublishedSuccessfully: t('admin.postUnpublishedSuccessfully'),
    postDeletedSuccessfully: t('admin.postDeletedSuccessfully'),
    confirmDeletePost: t('admin.confirmDeletePost'),
    actionCannotBeUndone: t('admin.actionCannotBeUndone'),
    published: t('admin.published'),
    draft: t('admin.draft'),
    addTranslation: t('admin.addTranslation'),
    deleteTranslation: t('admin.deleteTranslation'),
    confirmDeleteTranslation: t('admin.confirmDeleteTranslation'),
    translationDeletedSuccessfully: t('admin.translationDeletedSuccessfully'),
    errorUpdatingPost: t('admin.errorUpdatingPost'),
    errorPublishingPost: t('admin.errorPublishingPost'),
    errorUnpublishingPost: t('admin.errorUnpublishingPost'),
    errorDeletingPost: t('admin.errorDeletingPost'),
    errorDeletingTranslation: t('admin.errorDeletingTranslation'),
    postNotFound: t('admin.postNotFound'),
    noTranslationsFound: t('admin.noTranslationsFound'),
    titleRequired: t('admin.titleRequired'),
    contentRequired: t('admin.contentRequired'),
    autoSaved: t('admin.autoSaved'),
    justNow: t('admin.justNow'),
    minutesAgo: t('admin.minutesAgo'),
    selectLanguageToAdd: t('admin.selectLanguageToAdd')
  }
}} type="module">
  import { API_URLS } from '/src/config/api.ts';
  
  // Global variables
  let currentPost = null;
  let availableLanguages = [];
  let postTranslations = [];
  let autoSaveTimer = null;
  let hasUnsavedChanges = false;
  let isSubmitting = false;
  let loadedPostId = null; // Track which post is currently loaded

  async function initEditPost() {
    console.log('üöÄ InitEditPost started');
    console.log(' Current URL:', window.location.href);
    console.log('üìç URL pathname:', window.location.pathname);
    
    // Always extract postId from URL path to avoid cache issues
    const pathParts = window.location.pathname.split('/');
    console.log('üõ§Ô∏è Path parts:', pathParts);
    const editPostIndex = pathParts.findIndex(part => part === 'edit-post');
    const urlPostId = editPostIndex !== -1 ? pathParts[editPostIndex + 1] : null;
    console.log('üîç PostId from URL path:', urlPostId);
    
    // Also check Astro variables for comparison
    console.log('üÜî Astro postId (string):', typeof astroPostId !== 'undefined' ? astroPostId : 'undefined');
    console.log('üî¢ Astro postId (number):', typeof postIdNumber !== 'undefined' ? postIdNumber : 'undefined');
    
    // Always prioritize URL-based ID to avoid stale data
    const actualPostId = urlPostId && !isNaN(parseInt(urlPostId)) ? parseInt(urlPostId) : null;
    
    console.log('üéØ Final postId to use:', actualPostId);
    console.log('üîÑ Previously loaded postId:', loadedPostId);
    
    // Force reload if postId changed
    if (loadedPostId !== actualPostId) {
      console.log('üîÑ PostId changed, clearing cache...');
      currentPost = null;
      postTranslations = [];
      hasUnsavedChanges = false;
      isSubmitting = false;
      
      // Clear any existing auto-save timer
      if (autoSaveTimer) {
        clearInterval(autoSaveTimer);
        autoSaveTimer = null;
      }
    }
    
    loadedPostId = actualPostId;
    
    // Check authentication first
    if (!window.AdminAuth) {
      console.error('AdminAuth not available');
      showError('Authentication system not available');
      return;
    }

    if (!AdminAuth.isAuthenticated()) {
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/login`;
      return;
    }

    // Check if user is admin
    const user = AdminAuth.getCurrentUser();
    if (!user?.is_admin) {
      const accessDeniedDiv = document.getElementById('access-denied');
      const editPostContent = document.getElementById('edit-post');
      
      if (accessDeniedDiv) {
        accessDeniedDiv.classList.remove('hidden');
      }
      if (editPostContent) {
        editPostContent.style.display = 'none';
      }
      return;
    }

    // Validate final postId
    if (!actualPostId || isNaN(actualPostId)) {
      showError(`Invalid post ID: ${actualPostId}. URL: ${window.location.href}`);
      return;
    }

    // Reset UI to loading state
    resetToLoadingState();

    // Load post data and initialize form
    await loadPostData(actualPostId);
    await loadAvailableLanguages();
    
    if (currentPost) {
      initializeForm();
      setupEventListeners();
      startAutoSave();
    }
  }

  function resetToLoadingState() {
    // Show loading, hide other states
    const loadingDiv = document.getElementById('loading-post');
    const errorDiv = document.getElementById('error-loading');
    const formContainer = document.getElementById('edit-form-container');
    
    if (loadingDiv) loadingDiv.classList.remove('hidden');
    if (errorDiv) errorDiv.classList.add('hidden');
    if (formContainer) formContainer.classList.add('hidden');
    
    hideMessages();
    
    // Clear form data if it exists
    const form = document.getElementById('edit-post-form');
    if (form) {
      form.reset();
    }
    
    // Clear translation containers
    const tabsContainer = document.getElementById('translation-tabs');
    const translationsContainer = document.getElementById('translations-container');
    
    if (tabsContainer) tabsContainer.innerHTML = '';
    if (translationsContainer) translationsContainer.innerHTML = '';
    
    console.log('üîÑ UI reset to loading state');
  }

  async function loadPostData(postId) {
    const loadingDiv = document.getElementById('loading-post');
    const errorDiv = document.getElementById('error-loading');
    const errorMessageSpan = document.getElementById('error-loading-message');
    
    try {
      console.log('üîç Loading post data for ID:', postId);
      console.log('üåê API URL:', API_URLS.getAdminPost(postId));
      
      // Debug: Show which post ID we're trying to load
      if (window.location.search.includes('debug=true')) {
        alert(`Attempting to load post ID: ${postId}\nURL: ${API_URLS.getAdminPost(postId)}`);
      }
      
      // Try multiple approaches to get post data
      let response;
      let data;
      
      // Approach 1: Direct admin post endpoint (current method)
      response = await AdminAuth.makeAuthenticatedRequest(API_URLS.getAdminPost(postId), {
        method: 'GET'
      });

      if (response.ok) {
        data = await response.json();
        console.log('‚úÖ Post loaded via admin endpoint:', data);
      } else {
        console.log('‚ùå Admin endpoint failed:', response.status);
        
        // Approach 2: Load all admin posts and filter by ID (since ids parameter isn't working)
        const adminPostsUrl = API_URLS.getAdminPosts();
        console.log('üîÑ Trying admin posts endpoint (load all):', adminPostsUrl);
        
        response = await AdminAuth.makeAuthenticatedRequest(adminPostsUrl, {
          method: 'GET'
        });
        
        if (response.ok) {
          const adminPostsData = await response.json();
          console.log('üìä Admin posts response:', adminPostsData);
          
          if (adminPostsData.items && adminPostsData.items.length > 0) {
            // Find the post with the correct ID
            const foundPost = adminPostsData.items.find(post => post.id === postId);
            
            if (foundPost) {
              data = foundPost;
              console.log('‚úÖ Post found via admin posts endpoint:', data);
            } else {
              console.log('‚ùå Post ID not found in admin posts. Available IDs:', adminPostsData.items.map(p => p.id));
              throw new Error(`Post with ID ${postId} not found. Available posts: ${adminPostsData.items.map(p => `${p.id} (${p.slug})`).join(', ')}`);
            }
          } else {
            throw new Error('No posts found in admin posts response');
          }
        } else {
          throw new Error(`Both endpoints failed. Last status: ${response.status}`);
        }
      }

      if (data) {
        currentPost = data;
        postTranslations = data.translations || [];
        
        console.log('üìù Post loaded successfully:');
        console.log('- ID:', currentPost.id);
        console.log('- Slug:', currentPost.slug);
        console.log('- Published:', currentPost.is_published);
        console.log('- Translations count:', postTranslations.length);
        console.log('- Available languages:', postTranslations.map(t => t.language_code));
        
        // Debug: Show loaded post info
        if (window.location.search.includes('debug=true')) {
          alert(`Post loaded successfully!\nID: ${currentPost.id}\nSlug: ${currentPost.slug}\nTitle: ${postTranslations[0]?.title || 'No title'}`);
        }
        
        // Hide loading, show form
        if (loadingDiv) loadingDiv.classList.add('hidden');
        if (errorDiv) errorDiv.classList.add('hidden');
        
        const formContainer = document.getElementById('edit-form-container');
        if (formContainer) formContainer.classList.remove('hidden');
        
      } else {
        throw new Error(translations.postNotFound);
      }
    } catch (error) {
      console.error('‚ùå Error loading post:', error);
      
      // Debug: Show error info
      if (window.location.search.includes('debug=true')) {
        alert(`Error loading post ID ${postId}:\n${error.message}`);
      }
      
      if (loadingDiv) loadingDiv.classList.add('hidden');
      if (errorDiv) errorDiv.classList.remove('hidden');
      if (errorMessageSpan) {
        errorMessageSpan.textContent = error.message || 'Unknown error occurred';
      }
    }
  }

  async function loadAvailableLanguages() {
    try {
      console.log('üåç Loading available languages...');
      
      // Approach 1: Try to load from LanguageAPI (if available)
      if (window.LanguageAPI) {
        console.log('üîÑ Using LanguageAPI...');
        availableLanguages = await LanguageAPI.getLanguages(true); // Only active languages
        console.log('‚úÖ Languages loaded via LanguageAPI:', availableLanguages);
        return;
      }
      
      // Approach 2: Load from API directly (as per instructions)
      console.log('üîÑ Loading languages from API endpoints...');
      
      // Get language codes first
      const codesResponse = await AdminAuth.makeAuthenticatedRequest(API_URLS.getLanguageCodes(true), {
        method: 'GET'
      });
      
      if (codesResponse.ok) {
        const codes = await codesResponse.json();
        console.log('üìã Available language codes:', codes);
        
        // Get all languages with names
        const languagesResponse = await AdminAuth.makeAuthenticatedRequest(API_URLS.getLanguages(true), {
          method: 'GET'
        });
        
        if (languagesResponse.ok) {
          const allLanguages = await languagesResponse.json();
          console.log('üó£Ô∏è All languages data:', allLanguages);
          
          // Filter to only active languages
          availableLanguages = allLanguages.filter(lang => lang.is_active || codes.includes(lang.code));
          console.log('‚úÖ Final available languages:', availableLanguages);
        } else {
          throw new Error('Failed to load language details');
        }
      } else {
        throw new Error('Failed to load language codes');
      }
      
    } catch (error) {
      console.error('‚ùå Error loading languages:', error);
      console.log('üîÑ Using fallback languages...');
      
      // Fallback to default languages (as per current implementation)
      availableLanguages = [
        { code: 'en', name: 'English', native_name: 'English', is_active: true },
        { code: 'pl', name: 'Polish', native_name: 'Polski', is_active: true }
      ];
      console.log('üìå Fallback languages loaded:', availableLanguages);
    }
  }

  function initializeForm() {
    if (!currentPost) return;

    // Update post status header
    updatePostStatusHeader();
    
    // Fill basic form fields
    const slugInput = document.getElementById('slug');
    const authorInput = document.getElementById('author');
    const categorySelect = document.getElementById('category');
    const featuredImageInput = document.getElementById('featured_image');
    const tagsInput = document.getElementById('tags');

    if (slugInput) slugInput.value = currentPost.slug || '';
    if (authorInput) authorInput.value = currentPost.author || '';
    if (categorySelect) categorySelect.value = currentPost.category || 'general';
    if (featuredImageInput) featuredImageInput.value = currentPost.featured_image || '';
    if (tagsInput) tagsInput.value = Array.isArray(currentPost.tags) ? currentPost.tags.join(', ') : '';

    // Update action buttons based on publish status
    updateActionButtons();

    // Initialize translations
    createTranslationTabs();
    createTranslationForms();
    populateLanguageSelect();
    
    // Switch to first available translation
    if (postTranslations.length > 0) {
      switchToTranslationTab(postTranslations[0].language_code);
    }

    // Update preview button
    const previewBtn = document.getElementById('preview-post-btn');
    if (previewBtn) {
      previewBtn.style.display = 'block';
      previewBtn.onclick = () => previewPost(currentPost.slug);
    }
  }

  function updatePostStatusHeader() {
    const statusBadge = document.getElementById('post-status-badge');
    const createdDate = document.getElementById('post-created-date');
    const publishedDateContainer = document.getElementById('post-published-date-container');
    const publishedDate = document.getElementById('post-published-date');
    const slugDisplay = document.getElementById('post-slug-display');

    if (statusBadge) {
      if (currentPost.is_published) {
        statusBadge.textContent = translations.published;
        statusBadge.className = 'px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      } else {
        statusBadge.textContent = translations.draft;
        statusBadge.className = 'px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      }
    }

    if (createdDate) {
      createdDate.textContent = formatDate(currentPost.created_at);
    }

    if (publishedDateContainer && publishedDate) {
      if (currentPost.published_at) {
        publishedDateContainer.style.display = 'flex';
        publishedDate.textContent = formatDate(currentPost.published_at);
      } else {
        publishedDateContainer.style.display = 'none';
      }
    }

    if (slugDisplay) {
      slugDisplay.textContent = currentPost.slug;
    }
  }

  function updateActionButtons() {
    const publishBtn = document.getElementById('publish-btn');
    const unpublishBtn = document.getElementById('unpublish-btn');

    if (currentPost.is_published) {
      if (publishBtn) publishBtn.style.display = 'none';
      if (unpublishBtn) unpublishBtn.style.display = 'block';
    } else {
      if (publishBtn) publishBtn.style.display = 'block';
      if (unpublishBtn) unpublishBtn.style.display = 'none';
    }
  }

  function createTranslationTabs() {
    const tabsContainer = document.getElementById('translation-tabs');
    if (!tabsContainer || !postTranslations.length) return;

    tabsContainer.innerHTML = '';

    postTranslations.forEach(translation => {
      const tab = document.createElement('button');
      tab.type = 'button';
      tab.className = 'tab-button px-4 py-2 text-sm font-medium rounded-lg border transition-colors duration-200';
      tab.dataset.lang = translation.language_code;
      tab.textContent = getLanguageName(translation.language_code);
      
      tab.addEventListener('click', () => switchToTranslationTab(translation.language_code));
      tabsContainer.appendChild(tab);
    });
  }

  function createTranslationForms() {
    const container = document.getElementById('translations-container');
    if (!container) return;

    container.innerHTML = '';

    postTranslations.forEach(translation => {
      const form = createTranslationForm(translation);
      container.appendChild(form);
    });
  }

  function createTranslationForm(translation) {
    const { language_code } = translation;
    const flag = getLanguageFlag(language_code);
    const languageName = getLanguageName(language_code);

    const section = document.createElement('div');
    section.className = 'translation-form hidden';
    section.setAttribute('data-lang', language_code);

    section.innerHTML = `
      <div class="flex justify-between items-center mb-4">
        <h4 class="text-md font-medium text-gray-900 dark:text-white flex items-center">
          <span class="text-2xl mr-2">${flag}</span>
          ${languageName}
        </h4>
        ${postTranslations.length > 1 ? `
          <button type="button" class="delete-translation-btn text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-sm font-medium" data-lang="${language_code}">
            ${translations.deleteTranslation}
          </button>
        ` : ''}
      </div>

      <div class="space-y-4">
        <!-- Title -->
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            ${translations.titleRequired}
          </label>
          <input
            type="text"
            name="title-${language_code}"
            value="${escapeHtml(translation.title || '')}"
            placeholder="Enter post title in ${languageName}"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>

        <!-- Excerpt -->
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Excerpt
          </label>
          <textarea
            name="excerpt-${language_code}"
            rows="3"
            placeholder="Brief description of your post (optional)"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          >${escapeHtml(translation.excerpt || '')}</textarea>
        </div>

        <!-- Content -->
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            ${translations.contentRequired}
          </label>
          <textarea
            name="content-${language_code}"
            rows="12"
            placeholder="Write your post content in Markdown..."
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-sm"
            required
          >${escapeHtml(translation.content || '')}</textarea>
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">You can use Markdown formatting</p>
        </div>

        <!-- SEO Meta Fields -->
        <details class="border border-gray-200 dark:border-gray-700 rounded-lg">
          <summary class="px-4 py-2 cursor-pointer font-medium text-gray-900 dark:text-white hover:bg-gray-50 dark:hover:bg-slate-800">
            SEO Meta Tags
          </summary>
          <div class="px-4 pb-4 space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Meta Title
              </label>
              <input
                type="text"
                name="meta_title-${language_code}"
                value="${escapeHtml(translation.meta_title || '')}"
                maxlength="60"
                placeholder="SEO optimized title (leave empty to use post title)"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Meta Description
              </label>
              <textarea
                name="meta_description-${language_code}"
                rows="3"
                maxlength="160"
                placeholder="SEO description (leave empty to use excerpt)"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >${escapeHtml(translation.meta_description || '')}</textarea>
            </div>
          </div>
        </details>
      </div>
    `;

    // Add delete button event listener
    const deleteBtn = section.querySelector('.delete-translation-btn');
    if (deleteBtn) {
      deleteBtn.addEventListener('click', () => deleteTranslation(language_code));
    }

    return section;
  }

  function switchToTranslationTab(languageCode) {
    // Update tab states
    const tabs = document.querySelectorAll('.tab-button');
    tabs.forEach(tab => {
      if (tab.dataset.lang === languageCode) {
        tab.className = 'tab-button px-4 py-2 text-sm font-medium rounded-lg border border-blue-500 bg-blue-50 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400';
      } else {
        tab.className = 'tab-button px-4 py-2 text-sm font-medium rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-800';
      }
    });

    // Show/hide translation forms
    const forms = document.querySelectorAll('.translation-form');
    forms.forEach(form => {
      if (form.dataset.lang === languageCode) {
        form.classList.remove('hidden');
      } else {
        form.classList.add('hidden');
      }
    });
  }

  function populateLanguageSelect() {
    const select = document.getElementById('add-language-select');
    if (!select) return;

    select.innerHTML = '<option value="">' + translations.selectLanguageToAdd + '</option>';

    const existingLanguages = postTranslations.map(t => t.language_code);
    const availableToAdd = availableLanguages.filter(lang => !existingLanguages.includes(lang.code));

    availableToAdd.forEach(lang => {
      const option = document.createElement('option');
      option.value = lang.code;
      option.textContent = `${getLanguageFlag(lang.code)} ${lang.native_name}`;
      select.appendChild(option);
    });
  }

  function setupEventListeners() {
    const form = document.getElementById('edit-post-form');
    const addTranslationBtn = document.getElementById('add-translation-btn');
    const deletePostBtn = document.getElementById('delete-post-btn');

    // Form submission
    if (form && !form.dataset.listenerAdded) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isSubmitting) return;
        
        const submitBtn = e.submitter;
        const action = submitBtn?.dataset.action;
        
        await handleFormSubmit(action);
      });
      form.dataset.listenerAdded = 'true';
    }

    // Add translation
    if (addTranslationBtn && !addTranslationBtn.dataset.listenerAdded) {
      addTranslationBtn.addEventListener('click', addNewTranslation);
      addTranslationBtn.dataset.listenerAdded = 'true';
    }

    // Delete post
    if (deletePostBtn && !deletePostBtn.dataset.listenerAdded) {
      deletePostBtn.addEventListener('click', confirmDeletePost);
      deletePostBtn.dataset.listenerAdded = 'true';
    }

    // Track changes for auto-save
    form?.addEventListener('input', () => {
      hasUnsavedChanges = true;
    });
  }

  async function handleFormSubmit(action) {
    isSubmitting = true;
    hideMessages();

    const activeBtn = document.querySelector(`button[data-action="${action}"]`);
    const originalText = activeBtn?.textContent;

    try {
      // Collect form data
      const formData = collectFormData();
      if (!formData) {
        isSubmitting = false;
        return;
      }

      // Show loading state
      if (activeBtn) {
        activeBtn.disabled = true;
        if (action === 'save') {
          activeBtn.querySelector('span').textContent = translations.savingChanges;
        } else if (action === 'publish') {
          activeBtn.querySelector('span').textContent = translations.publishingPost;
        } else if (action === 'unpublish') {
          activeBtn.querySelector('span').textContent = translations.unpublishingPost;
        }
      }

      // Update post
      const updateResponse = await AdminAuth.makeAuthenticatedRequest(
        API_URLS.updatePost(currentPost.id),
        {
          method: 'PUT',
          body: JSON.stringify(formData),
        }
      );

      if (!updateResponse.ok) {
        const errorData = await updateResponse.text();
        throw new Error(`Failed to update post: ${errorData}`);
      }

      const updatedPost = await updateResponse.json();
      currentPost = updatedPost;

      // Handle publish/unpublish actions
      if (action === 'publish' && !currentPost.is_published) {
        const publishResponse = await AdminAuth.makeAuthenticatedRequest(
          API_URLS.publishPost(currentPost.id),
          { method: 'PUT' }
        );

        if (!publishResponse.ok) {
          throw new Error(translations.errorPublishingPost);
        }

        currentPost = await publishResponse.json();
        showSuccess(translations.postPublishedSuccessfully);
      } else if (action === 'unpublish' && currentPost.is_published) {
        const unpublishResponse = await AdminAuth.makeAuthenticatedRequest(
          API_URLS.unpublishPost(currentPost.id),
          { method: 'PUT' }
        );

        if (!unpublishResponse.ok) {
          throw new Error(translations.errorUnpublishingPost);
        }

        currentPost = await unpublishResponse.json();
        showSuccess(translations.postUnpublishedSuccessfully);
      } else if (action === 'save') {
        showSuccess(translations.postUpdatedSuccessfully);
      }

      // Update UI
      updatePostStatusHeader();
      updateActionButtons();
      hasUnsavedChanges = false;
      updateAutoSaveIndicator();

    } catch (error) {
      console.error('Error handling form submission:', error);
      showError(error.message || translations.errorUpdatingPost);
    } finally {
      // Reset button state
      if (activeBtn) {
        activeBtn.disabled = false;
        if (activeBtn.querySelector('span')) {
          activeBtn.querySelector('span').textContent = originalText?.trim() || '';
        }
      }
      isSubmitting = false;
    }
  }

  function collectFormData() {
    const form = document.getElementById('edit-post-form');
    if (!form) return null;

    const formData = new FormData(form);
    const translations = [];

    // Collect translations
    postTranslations.forEach(translation => {
      const lang = translation.language_code;
      const title = formData.get(`title-${lang}`)?.toString().trim();
      const content = formData.get(`content-${lang}`)?.toString().trim();
      const excerpt = formData.get(`excerpt-${lang}`)?.toString().trim() || '';
      const metaTitle = formData.get(`meta_title-${lang}`)?.toString().trim() || '';
      const metaDescription = formData.get(`meta_description-${lang}`)?.toString().trim() || '';

      if (!title || !content) {
        const langName = getLanguageName(lang);
        showError(`${translations.titleRequired} and ${translations.contentRequired} are required for ${langName} translation`);
        return null;
      }

      translations.push({
        language_code: lang,
        title,
        content,
        excerpt,
        meta_title: metaTitle,
        meta_description: metaDescription
      });
    });

    if (translations.length === 0) {
      showError(translations.noTranslationsFound);
      return null;
    }

    // Process tags
    const tagsArray = formData.get('tags')?.toString()
      ? formData.get('tags').toString().split(',')
          .map(tag => tag.trim())
          .filter(tag => tag.length > 0)
          .slice(0, 10)
          .filter(tag => tag.length <= 50)
      : [];

    return {
      slug: currentPost.slug, // Keep original slug
      author: formData.get('author')?.toString().trim() || currentPost.author,
      category: formData.get('category')?.toString() || 'general',
      featured_image: formData.get('featured_image')?.toString().trim() || null,
      tags: tagsArray,
      translations: translations
    };
  }

  async function addNewTranslation() {
    const select = document.getElementById('add-language-select');
    const languageCode = select?.value;

    if (!languageCode) {
      showError('Please select a language to add');
      return;
    }

    // Check if translation already exists
    if (postTranslations.some(t => t.language_code === languageCode)) {
      showError('Translation for this language already exists');
      return;
    }

    // Add empty translation
    const newTranslation = {
      language_code: languageCode,
      title: '',
      content: '',
      excerpt: '',
      meta_title: '',
      meta_description: ''
    };

    postTranslations.push(newTranslation);

    // Recreate UI
    createTranslationTabs();
    createTranslationForms();
    populateLanguageSelect();
    switchToTranslationTab(languageCode);

    showSuccess(`Translation for ${getLanguageName(languageCode)} added`);
  }

  async function deleteTranslation(languageCode) {
    if (postTranslations.length <= 1) {
      showError('Cannot delete the last translation');
      return;
    }

    const langName = getLanguageName(languageCode);
    if (!confirm(`${translations.confirmDeleteTranslation} ${langName}? ${translations.actionCannotBeUndone}`)) {
      return;
    }

    try {
      // If the translation has an ID, delete it from server
      const translation = postTranslations.find(t => t.language_code === languageCode);
      if (translation?.id) {
        const response = await AdminAuth.makeAuthenticatedRequest(
          API_URLS.deleteTranslation(currentPost.id, languageCode),
          { method: 'DELETE' }
        );

        if (!response.ok) {
          throw new Error(translations.errorDeletingTranslation);
        }
      }

      // Remove from local array
      postTranslations = postTranslations.filter(t => t.language_code !== languageCode);

      // Recreate UI
      createTranslationTabs();
      createTranslationForms();
      populateLanguageSelect();

      // Switch to first available translation
      if (postTranslations.length > 0) {
        const newLang = postTranslations[0].language_code;
        switchToTranslationTab(newLang);
      }

      showSuccess(translations.translationDeletedSuccessfully);

    } catch (error) {
      console.error('Error deleting translation:', error);
      showError(error.message || translations.errorDeletingTranslation);
    }
  }

  async function confirmDeletePost() {
    const confirmMessage = `${translations.confirmDeletePost}\n\n"${currentPost.slug}"\n\n${translations.actionCannotBeUndone}`;
    
    if (!confirm(confirmMessage)) {
      return;
    }

    try {
      const deleteBtn = document.getElementById('delete-post-btn');
      if (deleteBtn) {
        deleteBtn.disabled = true;
        deleteBtn.textContent = 'Deleting...';
      }

      const response = await AdminAuth.makeAuthenticatedRequest(
        API_URLS.deletePost(currentPost.id),
        { method: 'DELETE' }
      );

      if (!response.ok) {
        throw new Error(translations.errorDeletingPost);
      }

      showSuccess(translations.postDeletedSuccessfully);

      // Redirect to dashboard after a short delay
      setTimeout(() => {
        const currentLang = window.location.pathname.split('/')[1];
        window.location.href = `/${currentLang}/admin/dashboard`;
      }, 2000);

    } catch (error) {
      console.error('Error deleting post:', error);
      showError(error.message || translations.errorDeletingPost);
      
      const deleteBtn = document.getElementById('delete-post-btn');
      if (deleteBtn) {
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = `
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
          ${translations.deletePost}
        `;
      }
    }
  }

  function startAutoSave() {
    // Clear existing timer
    if (autoSaveTimer) {
      clearInterval(autoSaveTimer);
    }

    // Auto-save every 30 seconds if there are unsaved changes
    autoSaveTimer = setInterval(async () => {
      if (hasUnsavedChanges && !isSubmitting) {
        try {
          const formData = collectFormData();
          if (formData) {
            const response = await AdminAuth.makeAuthenticatedRequest(
              API_URLS.updatePost(currentPost.id),
              {
                method: 'PUT',
                body: JSON.stringify(formData),
              }
            );

            if (response.ok) {
              hasUnsavedChanges = false;
              updateAutoSaveIndicator();
            }
          }
        } catch (error) {
          console.error('Auto-save failed:', error);
        }
      }
    }, 30000); // 30 seconds
  }

  function updateAutoSaveIndicator() {
    const indicator = document.getElementById('autosave-indicator');
    const timeSpan = document.getElementById('last-saved-time');
    
    if (indicator && timeSpan) {
      indicator.classList.remove('hidden');
      timeSpan.textContent = translations.justNow;
      
      // Hide after 3 seconds
      setTimeout(() => {
        indicator.classList.add('hidden');
      }, 3000);
    }
  }

  // Utility functions
  function getLanguageFlag(code) {
    const flags = {
      'pl': 'üáµüá±', 'en': 'üá∫üá∏', 'de': 'üá©üá™', 'fr': 'üá´üá∑', 'es': 'üá™üá∏',
      'it': 'üáÆüáπ', 'pt': 'üáµüáπ', 'ru': 'üá∑üá∫', 'zh': 'üá®üá≥', 'ja': 'üáØüáµ', 'ko': 'üá∞üá∑'
    };
    return flags[code.toLowerCase()] || 'üåê';
  }

  function getLanguageName(code) {
    const lang = availableLanguages.find(l => l.code === code);
    return lang ? lang.native_name : code.toUpperCase();
  }

  function formatDate(dateString) {
    if (!dateString) return '';
    return new Date(dateString).toLocaleString();
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function previewPost(slug) {
    const currentLang = window.location.pathname.split('/')[1];
    
    if (currentPost.is_published) {
      // For published posts, use the regular blog URL
      const previewUrl = `/${currentLang}/blog/${slug}`;
      window.open(previewUrl, '_blank');
    } else {
      // For draft posts, we need to implement a preview mode
      // You could either:
      // 1. Add preview=true parameter to the blog page and modify it to handle drafts
      // 2. Create a separate preview page for drafts
      // 3. Show a temporary preview in a modal/new window
      
      // For now, try to open the blog post with a preview parameter
      // This would require updating the blog/[slug].astro page to handle preview mode
      const previewUrl = `/${currentLang}/blog/${slug}?preview=true&admin_token=${AdminAuth.getToken()}`;
      
      // Show a warning that this is a draft preview
      if (confirm('This is a draft post that may not be publicly visible. Do you want to continue with preview?')) {
        window.open(previewUrl, '_blank');
      }
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');
    
    if (errorDiv) {
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
    }
    if (successDiv) {
      successDiv.classList.add('hidden');
    }
  }

  function showSuccess(message) {
    const successDiv = document.getElementById('success-message');
    const errorDiv = document.getElementById('error-message');
    
    if (successDiv) {
      successDiv.textContent = message;
      successDiv.classList.remove('hidden');
    }
    if (errorDiv) {
      errorDiv.classList.add('hidden');
    }
  }

  function hideMessages() {
    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');
    
    if (errorDiv) errorDiv.classList.add('hidden');
    if (successDiv) successDiv.classList.add('hidden');
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initEditPost);
  document.addEventListener('astro:page-load', initEditPost);

  // Cleanup on page unload
  window.addEventListener('beforeunload', (e) => {
    if (hasUnsavedChanges && !isSubmitting) {
      e.preventDefault();
      e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
    }
  });
</script>
