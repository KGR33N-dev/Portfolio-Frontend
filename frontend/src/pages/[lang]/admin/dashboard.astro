---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('admin.dashboard'),
  description: t('admin.blogManagement'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<!-- Import required modules in head for global availability -->
<script>
  import '~/config/api';
  import '~/utils/adminAuth';
</script>

<Layout metadata={metadata}>
  <WidgetWrapper 
    id="admin-dashboard" 
    containerClass="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8"
  >
    <!-- Header with title -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div>
          <Headline 
            title={t('admin.dashboard')}
            subtitle={t('admin.welcome')}
            classes={{
              container: '',
              title: 'text-2xl font-bold text-gray-900 dark:text-white',
              subtitle: 'text-sm text-gray-600 dark:text-gray-400 mt-1'
            }}
          />
        </div>
      </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg">
            <svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">{t('admin.totalPosts')}</p>
            <p id="total-posts" class="text-2xl font-bold text-gray-900 dark:text-white">-</p>
          </div>
        </div>
      </div>

      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-green-100 dark:bg-green-900/20 rounded-lg">
            <svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">{t('admin.publishedPosts')}</p>
            <p id="published-posts" class="text-2xl font-bold text-gray-900 dark:text-white">-</p>
          </div>
        </div>
      </div>

      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg">
            <svg class="w-6 h-6 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">{t('admin.draftPosts')}</p>
            <p id="draft-posts" class="text-2xl font-bold text-gray-900 dark:text-white">-</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
      <!-- Quick Actions Panel -->
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.actions')}</h3>
        </div>
        <div class="p-6 space-y-4">
          <button 
            id="new-post-btn"
            class="w-full flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            {t('admin.newPost')}
          </button>
          
          <button 
            id="languages-btn"
            class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
            </svg>
            {t('admin.manageLanguages')}
          </button>
          
          <button 
            id="settings-btn"
            class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            {t('admin.settings')}
          </button>
        </div>
      </div>

      <!-- Draft Posts Panel -->
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.draftPosts')}</h3>
        </div>
        <div class="p-6">
          <div id="draft-posts-list" class="space-y-4">
            <!-- Draft posts will be loaded here dynamically -->
            <div class="flex items-center justify-center py-8">
              <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-yellow-600"></div>
              <span class="ml-2 text-gray-600 dark:text-gray-400">{t('admin.loadingDrafts')}</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- All Posts Management -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.allPosts')}</h3>
        <div class="flex space-x-2">
          <select id="filter-status" class="text-sm border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 bg-white dark:bg-slate-800 text-gray-900 dark:text-white">
            <option value="all">{t('admin.allStatuses')}</option>
            <option value="published">{t('admin.published')}</option>
            <option value="draft">{t('admin.draft')}</option>
          </select>
          <select id="filter-language" class="text-sm border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 bg-white dark:bg-slate-800 text-gray-900 dark:text-white">
            <option value="all">{t('admin.allLanguages')}</option>
            <option value="en">English</option>
            <option value="pl">Polski</option>
          </select>
        </div>
      </div>
      <div class="p-6">
        <div id="all-posts-list" class="space-y-4">
          <!-- All posts will be loaded here dynamically -->
          <div class="flex items-center justify-center py-8">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span class="ml-2 text-gray-600 dark:text-gray-400">{t('admin.loadingPosts')}</span>
          </div>
        </div>
        <!-- Pagination -->
        <div id="posts-pagination" class="mt-6 flex justify-center">
          <!-- Pagination will be added here -->
        </div>
      </div>
    </div>

    <!-- System Status -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.systemStatus')}</h3>
      </div>
      <div class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="flex items-center">
            <div id="api-status-icon" class="w-3 h-3 rounded-full bg-gray-400 mr-2"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">{t('admin.apiConnection')}: </span>
            <span id="api-status-text" class="text-sm font-medium ml-1">{t('admin.checking')}</span>
          </div>
          <div class="flex items-center">
            <div id="auth-status-icon" class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">{t('admin.authentication')}: </span>
            <span id="auth-status-text" class="text-sm font-medium text-green-600 ml-1">{t('admin.active')}</span>
          </div>
          <div class="flex items-center">
            <div class="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">{t('admin.version')}: </span>
            <span class="text-sm font-medium text-blue-600 ml-1">v1.0.0</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Access Denied Message (hidden by default) -->
    <div id="access-denied" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-6 py-4 rounded-lg text-center">
      <h3 class="font-semibold text-lg mb-2">{t('admin.accessDenied')}</h3>
      <p class="mb-4">{t('admin.adminAccessRequired')}</p>
      <a href={`/${lang}/login`} class="inline-block px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
        {t('admin.goToLogin')}
      </a>
    </div>
  </WidgetWrapper>
</Layout>

<script define:vars={{ 
  translations: {
    loadingPosts: t('admin.loadingPosts'),
    noPostsYet: t('admin.noPostsYet'),
    errorLoadingData: t('admin.errorLoadingData'),
    connected: t('admin.connected'),
    disconnected: t('admin.disconnected'),
    published: t('admin.published'),
    draft: t('admin.draft'),
    edit: t('admin.edit'),
    checking: t('admin.checking')
  },
  isDev: import.meta.env.DEV
}} type="module">
  
  // Simple dashboard initialization - fetch data once and display
  async function initDashboard() {
    if (isDev) console.log('Dashboard: Starting initialization');
    
    // Check auth first
    if (!window.AdminAuth || !window.AdminAuth.hasToken()) {
      redirectToLogin();
      return;
    }

    try {
      // Verify token with server
      const user = await window.AdminAuth.verifyUser();
      if (!user || !user.is_admin) {
        showAccessDenied();
        return;
      }

      if (isDev) console.log('Dashboard: Auth verified, loading data');
      
      // Load dashboard data once
      await loadDashboardData();
      
      // Setup navigation buttons
      setupButtons();
      
      // Check API status
      checkAPIStatus();
      
    } catch (error) {
      if (isDev) console.error('Dashboard init failed:', error);
      redirectToLogin();
    }
  }

  async function loadDashboardData() {
    try {
      if (isDev) {
        console.log('🔄 Loading dashboard data...');
        console.log('🎯 Using endpoint:', window.API_URLS.getAdminPosts({ status: 'all', per_page: 100 }));
      }
      
      // Load ALL posts (published and drafts) for admin dashboard using authenticated admin endpoint
      const response = await window.AdminAuth.makeAuthenticatedRequest(
        window.API_URLS.getAdminPosts({ status: 'all', per_page: 100 })
      );
      
      if (!response.ok) {
        const errorText = await response.text();
        if (isDev) {
          console.error('❌ API Response failed:', {
            status: response.status,
            statusText: response.statusText,
            error: errorText
          });
        }
        throw new Error(`Failed to fetch posts: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      const posts = data.posts || data.items || data || [];
      
      if (isDev) {
        console.log('📊 Dashboard data loaded successfully:', {
          dataStructure: Object.keys(data),
          postsCount: posts.length,
          samplePost: posts[0] ? {
            id: posts[0].id,
            title: posts[0].title,
            slug: posts[0].slug,
            is_published: posts[0].is_published,
            created_at: posts[0].created_at,
            language: posts[0].language
          } : 'No posts found'
        });
      }
      
      // Update stats
      updateStats(posts);
      
      // Show recent drafts (filter unpublished posts and show first 5)
      const draftPosts = posts.filter(post => !post.is_published);
      showDrafts(draftPosts.slice(0, 5));
      
      // Show all posts
      showAllPosts(posts);
      
    } catch (error) {
      if (isDev) console.error('❌ Failed to load dashboard data:', error);
      showError();
    }
  }

  function updateStats(posts) {
    const total = posts.length;
    const published = posts.filter(p => p.is_published).length;
    const drafts = total - published;

    const totalElement = document.getElementById('total-posts');
    const publishedElement = document.getElementById('published-posts');
    const draftElement = document.getElementById('draft-posts');
    
    if (totalElement) totalElement.textContent = total;
    if (publishedElement) publishedElement.textContent = published;
    if (draftElement) draftElement.textContent = drafts;
    
    // If any elements are missing, log warning
    if (!totalElement || !publishedElement || !draftElement) {
      if (isDev) console.warn('Dashboard: Some stat elements not found during update');
    }
  }

  function showDrafts(drafts) {
    const container = document.getElementById('draft-posts-list');
    if (!container) return;

    if (drafts.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-600 dark:text-gray-400">${translations.noPostsYet}</p>
        </div>
      `;
      return;
    }

    if (isDev) {
      console.log('📋 Rendering drafts:', drafts.map(post => ({id: post.id, title: post.title, slug: post.slug})));
    }

    container.innerHTML = drafts.map(post => {
      if (!post.id) {
        console.error('❌ Draft post missing ID:', post);
        return '';
      }
      return `
        <div class="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-600 rounded-lg">
          <div>
            <h4 class="font-medium text-gray-900 dark:text-white">${post.slug || 'No slug'}</h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Title: ${post.title || 'Untitled'} • ${new Date(post.created_at).toLocaleDateString()}
            </p>
          </div>
          <div class="flex space-x-2">
            <span class="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400 rounded-full">
              ${translations.draft}
            </span>
            <button onclick="editPost(${post.id})" class="text-blue-600 hover:text-blue-800 text-sm">
              ${translations.edit}
            </button>
          </div>
        </div>
      `;
    }).filter(html => html !== '').join('');
  }

  function showAllPosts(posts) {
    const container = document.getElementById('all-posts-list');
    if (!container) return;

    if (posts.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-600 dark:text-gray-400">${translations.noPostsYet}</p>
        </div>
      `;
      return;
    }

    if (isDev) {
      console.log('📄 Rendering all posts:', posts.map(post => ({id: post.id, title: post.title, published: post.is_published})));
    }

    container.innerHTML = posts.map(post => {
      if (!post.id) {
        console.error('❌ Post missing ID:', post);
        return '';
      }
      return `
        <div class="flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
          <div>
            <h4 class="font-medium text-gray-900 dark:text-white">${post.slug || 'No slug'}</h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Title: ${post.title || 'Untitled'} • ${new Date(post.created_at).toLocaleDateString()}
            </p>
          </div>
          <div class="flex items-center space-x-3">
            <span class="px-2 py-1 text-xs font-medium ${post.is_published 
              ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' 
              : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'
            } rounded-full">
              ${post.is_published ? translations.published : translations.draft}
            </span>
            <button onclick="editPost(${post.id})" class="text-blue-600 hover:text-blue-800 text-sm">
              ${translations.edit}
            </button>
            <button onclick="deletePost(${post.id})" class="text-red-600 hover:text-red-800 text-sm">
              Delete
            </button>
          </div>
        </div>
      `;
    }).filter(html => html !== '').join('');
  }

  function setupButtons() {
    const newPostBtn = document.getElementById('new-post-btn');
    const languagesBtn = document.getElementById('languages-btn');
    const settingsBtn = document.getElementById('settings-btn');

    if (newPostBtn) {
      newPostBtn.onclick = () => {
        const currentLang = window.location.pathname.split('/')[1];
        window.location.href = `/${currentLang}/admin/create-post`;
      };
    }

    if (languagesBtn) {
      languagesBtn.onclick = () => {
        const currentLang = window.location.pathname.split('/')[1];
        window.location.href = `/${currentLang}/admin/languages`;
      };
    }

    if (settingsBtn) {
      settingsBtn.onclick = () => {
        const currentLang = window.location.pathname.split('/')[1];
        window.location.href = `/${currentLang}/account`;
      };
    }
  }

  async function checkAPIStatus() {
    const icon = document.getElementById('api-status-icon');
    const text = document.getElementById('api-status-text');
    
    try {
      const response = await fetch(window.API_URLS.health());
      if (response.ok) {
        if (icon) icon.className = 'w-3 h-3 rounded-full bg-green-500 mr-2';
        if (text) {
          text.textContent = translations.connected;
          text.className = 'text-sm font-medium text-green-600 ml-1';
        }
      } else {
        throw new Error('API not responding');
      }
    } catch (error) {
      if (isDev) console.error('API status check failed:', error);
      if (icon) icon.className = 'w-3 h-3 rounded-full bg-red-500 mr-2';
      if (text) {
        text.textContent = translations.disconnected;
        text.className = 'text-sm font-medium text-red-600 ml-1';
      }
    }
  }

  // Notification helper functions
  function showInfo(message) {
    if (window.NotificationManager) {
      window.NotificationManager.info(message);
    } else {
      alert(message);
    }
  }

  function showSuccess(message) {
    if (window.NotificationManager) {
      window.NotificationManager.success(message);
    } else {
      alert(message);
    }
  }

  function showError(message = null) {
    // If no specific message provided, use default error message
    const errorMessage = message || translations.errorLoadingData || 'Error loading data';
    
    if (window.NotificationManager) {
      window.NotificationManager.error(errorMessage);
    } else {
      alert(errorMessage);
    }
    
    // Also update containers for data loading errors
    if (!message) {
      const containers = ['draft-posts-list', 'all-posts-list'];
      containers.forEach(id => {
        const container = document.getElementById(id);
        if (container) {
          container.innerHTML = `
            <div class="text-center py-8">
              <p class="text-red-600 dark:text-red-400">${translations.errorLoadingData}</p>
            </div>
          `;
        }
      });
    }
  }

  function showAccessDenied() {
    const accessDenied = document.getElementById('access-denied');
    const dashboard = document.getElementById('admin-dashboard');
    
    if (accessDenied) accessDenied.classList.remove('hidden');
    if (dashboard) dashboard.classList.add('hidden');
  }

  function redirectToLogin() {
    const currentLang = window.location.pathname.split('/')[1];
    window.location.href = `/${currentLang}/login`;
  }

  // Function to refresh dashboard data
  async function refreshDashboard() {
    if (isDev) console.log('🔄 Refreshing dashboard data...');
    
    // Show loading state
    clearDashboardState();
    
    // Reload data
    await loadDashboardData();
    
    if (isDev) console.log('✅ Dashboard refreshed');
  }

  // Global functions for post actions
  window.editPost = function(postId) {
    if (!postId || postId === 'undefined' || postId === 'null') {
      console.error('❌ editPost: Invalid postId:', postId);
      showError('Invalid post ID');
      return;
    }
    
    if (isDev) console.log('✏️ Editing post:', postId);
    const currentLang = window.location.pathname.split('/')[1];
    window.location.href = `/${currentLang}/admin/edit-post/${postId}`;
  };

  window.deletePost = function(postId) {
    if (!postId || postId === 'undefined' || postId === 'null') {
      console.error('❌ deletePost: Invalid postId:', postId);
      showError('Invalid post ID');
      return;
    }
    
    if (confirm('Are you sure you want to delete this post?')) {
      if (isDev) console.log('🗑️ Delete post:', postId);
      // TODO: Add actual delete API call here
      showSuccess('Post deleted successfully');
      // Refresh dashboard after delete
      setTimeout(refreshDashboard, 1000);
    }
  };

  // Make refresh function globally available for other components
  window.refreshDashboard = refreshDashboard;

  // Global initialization tracker
  let isDashboardInitialized = false;

  function initDashboardOnce() {
    // Check if we're actually on the dashboard page by checking for required elements
    const requiredElements = ['total-posts', 'published-posts', 'draft-posts'];
    const missingElements = requiredElements.filter(id => !document.getElementById(id));
    
    if (missingElements.length > 0) {
      if (isDev) {
        console.log('Dashboard: Required elements not found, skipping initialization. Missing:', missingElements);
      }
      return;
    }
    
    if (isDev) console.log('Dashboard: Starting initialization, current state:', isDashboardInitialized);
    
    // Clear previous state
    clearDashboardState();
    
    // Mark as initialized
    isDashboardInitialized = true;
    
    // Run the actual initialization
    initDashboard();
  }

  function clearDashboardState() {
    // Clear stats
    const totalPosts = document.getElementById('total-posts');
    const publishedPosts = document.getElementById('published-posts');
    const draftPosts = document.getElementById('draft-posts');
    
    if (totalPosts) totalPosts.textContent = '-';
    if (publishedPosts) publishedPosts.textContent = '-';
    if (draftPosts) draftPosts.textContent = '-';
    
    // Clear lists
    const draftsList = document.getElementById('draft-posts-list');
    const allPostsList = document.getElementById('all-posts-list');
    
    if (draftsList) draftsList.innerHTML = `<div class="text-center py-4"><span class="text-gray-500">${translations.loadingPosts}</span></div>`;
    if (allPostsList) allPostsList.innerHTML = `<div class="text-center py-4"><span class="text-gray-500">${translations.loadingPosts}</span></div>`;
    
    // Reset API status
    const apiIcon = document.getElementById('api-status-icon');
    const apiText = document.getElementById('api-status-text');
    
    if (apiIcon) apiIcon.className = 'w-3 h-3 rounded-full bg-gray-500 mr-2';
    if (apiText) {
      apiText.textContent = translations.checking || 'Checking...';
      apiText.className = 'text-sm font-medium text-gray-600 ml-1';
    }
    
    if (isDev) console.log('Dashboard state cleared');
  }

  // Initialize when page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      // Static notification system is already available
      if (isDev) console.log('✅ Dashboard using static notification system');
      
      initDashboardOnce();
    }, { once: true });
  } else {
    // Initialize notification system
    // Static notification system is already available
    if (isDev) console.log('✅ Dashboard using static notification system');
    
    initDashboardOnce();
  }
  
  // For Astro SPA navigation, always reinitialize to prevent stale state
  document.addEventListener('astro:page-load', () => {
    // Only initialize if we're actually on the dashboard page
    const dashboardContainer = document.getElementById('total-posts');
    if (!dashboardContainer) {
      if (isDev) {
        console.log('Astro page load detected, but not on dashboard page - skipping initialization');
      }
      return;
    }
    
    if (isDev) {
      console.log('Astro page load detected, reinitializing Dashboard');
    }
    
    // Static notification system is already available
    if (isDev) console.log('✅ Dashboard using static notification system');
    
    // Always reset and reinitialize on page navigation to prevent stale state
    isDashboardInitialized = false;
    initDashboardOnce();
  });

  // Refresh dashboard when user returns to the page (after editing post)
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden && document.getElementById('total-posts')) {
      if (isDev) console.log('👁️ Page visible, refreshing dashboard data');
      refreshDashboard();
    }
  });

  // Also refresh on window focus
  window.addEventListener('focus', () => {
    if (document.getElementById('total-posts')) {
      if (isDev) console.log('🎯 Window focused, refreshing dashboard data');
      setTimeout(refreshDashboard, 100); // Small delay to ensure page is fully loaded
    }
  });
</script>
