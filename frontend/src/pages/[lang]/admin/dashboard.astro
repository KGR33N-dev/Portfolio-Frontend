---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('admin.dashboard'),
  description: t('admin.blogManagement'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<!-- Import required modules in head for global availability -->
<script>
  import '~/config/api';
  import '~/utils/adminAuth';
</script>

<Layout metadata={metadata}>
  <WidgetWrapper 
    id="admin-dashboard" 
    containerClass="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8"
  >
    <!-- Header with title -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div>
          <Headline 
            title={t('admin.dashboard')}
            subtitle={t('admin.welcome')}
            classes={{
              container: '',
              title: 'text-2xl font-bold text-gray-900 dark:text-white',
              subtitle: 'text-sm text-gray-600 dark:text-gray-400 mt-1'
            }}
          />
        </div>
      </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg">
            <svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">{t('admin.totalPosts')}</p>
            <p id="total-posts" class="text-2xl font-bold text-gray-900 dark:text-white">-</p>
          </div>
        </div>
      </div>

      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-green-100 dark:bg-green-900/20 rounded-lg">
            <svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">{t('admin.publishedPosts')}</p>
            <p id="published-posts" class="text-2xl font-bold text-gray-900 dark:text-white">-</p>
          </div>
        </div>
      </div>

      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg">
            <svg class="w-6 h-6 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">{t('admin.draftPosts')}</p>
            <p id="draft-posts" class="text-2xl font-bold text-gray-900 dark:text-white">-</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
      <!-- Quick Actions Panel -->
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.actions')}</h3>
        </div>
        <div class="p-6 space-y-4">
          <button 
            id="new-post-btn"
            class="w-full flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            {t('admin.newPost')}
          </button>
          
          <button 
            id="languages-btn"
            class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
            </svg>
            {t('admin.manageLanguages')}
          </button>
          
          <button 
            id="settings-btn"
            class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-800 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            {t('admin.settings')}
          </button>
        </div>
      </div>

      <!-- Draft Posts Panel -->
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.draftPosts')}</h3>
        </div>
        <div class="p-6">
          <div id="draft-posts-list" class="space-y-4">
            <!-- Draft posts will be loaded here dynamically -->
            <div class="flex items-center justify-center py-8">
              <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-yellow-600"></div>
              <span class="ml-2 text-gray-600 dark:text-gray-400">{t('admin.loadingDrafts')}</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- All Posts Management -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.allPosts')}</h3>
        <div class="flex space-x-2">
          <select id="filter-status" class="text-sm border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 bg-white dark:bg-slate-800 text-gray-900 dark:text-white">
            <option value="all">{t('admin.allStatuses')}</option>
            <option value="published">{t('admin.published')}</option>
            <option value="draft">{t('admin.draft')}</option>
          </select>
          <select id="filter-language" class="text-sm border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 bg-white dark:bg-slate-800 text-gray-900 dark:text-white">
            <option value="all">{t('admin.allLanguages')}</option>
            <option value="en">English</option>
            <option value="pl">Polski</option>
          </select>
        </div>
      </div>
      <div class="p-6">
        <div id="all-posts-list" class="space-y-4">
          <!-- All posts will be loaded here dynamically -->
          <div class="flex items-center justify-center py-8">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span class="ml-2 text-gray-600 dark:text-gray-400">{t('admin.loadingPosts')}</span>
          </div>
        </div>
        <!-- Pagination -->
        <div id="posts-pagination" class="mt-6 flex justify-center">
          <!-- Pagination will be added here -->
        </div>
      </div>
    </div>

    <!-- System Status -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{t('admin.systemStatus')}</h3>
      </div>
      <div class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="flex items-center">
            <div id="api-status-icon" class="w-3 h-3 rounded-full bg-gray-400 mr-2"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">{t('admin.apiConnection')}: </span>
            <span id="api-status-text" class="text-sm font-medium ml-1">{t('admin.checking')}</span>
          </div>
          <div class="flex items-center">
            <div id="auth-status-icon" class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">{t('admin.authentication')}: </span>
            <span id="auth-status-text" class="text-sm font-medium text-green-600 ml-1">{t('admin.active')}</span>
          </div>
          <div class="flex items-center">
            <div class="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">{t('admin.version')}: </span>
            <span class="text-sm font-medium text-blue-600 ml-1">v1.0.0</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Access Denied Message (hidden by default) -->
    <div id="access-denied" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-6 py-4 rounded-lg text-center">
      <h3 class="font-semibold text-lg mb-2">{t('admin.accessDenied')}</h3>
      <p class="mb-4">{t('admin.adminAccessRequired')}</p>
      <a href={`/${lang}/login`} class="inline-block px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
        {t('admin.goToLogin')}
      </a>
    </div>
  </WidgetWrapper>
</Layout>

<script define:vars={{ 
  translations: {
    loadingPosts: t('admin.loadingPosts'),
    loadingDrafts: t('admin.loadingDrafts'),
    noPostsYet: t('admin.noPostsYet'),
    noDraftPosts: t('admin.noDraftPosts'),
    createFirstPost: t('admin.createFirstPost'),
    createNewPost: t('admin.createNewPost'),
    viewAllPosts: t('admin.viewAllPosts'),
    errorLoadingData: t('admin.errorLoadingData'),
    errorLoadingDrafts: t('admin.errorLoadingDrafts'),
    checkApiServer: t('admin.checkApiServer'),
    connected: t('admin.connected'),
    disconnected: t('admin.disconnected'),
    published: t('admin.published'),
    draft: t('admin.draft'),
    edit: t('admin.edit'),
    created: t('admin.createdAt')
  }
}} type="module">
  import { API_URLS } from '/src/config/api.ts';
  import { convertApiPostToPost } from '/src/types/blog.ts';
  
  async function initAdminDashboard() {
    // AdminAuth powinien być już dostępny globalnie
    if (!window.AdminAuth) {
      console.error('AdminAuth not available');
      return;
    }
    
    const AdminAuth = window.AdminAuth;
    
    // Check authentication first - verify with server
    async function checkAuth() {
      // First check if we have stored credentials
      if (!AdminAuth.hasToken()) {
        redirectToLogin();
        return false;
      }
      
      try {
        // Verify the session is still valid on the server
        const user = await AdminAuth.verifyUser();
        if (!user) {
          redirectToLogin();
          return false;
        }
        
        // Check if user is admin
        if (!user.is_admin) {
          const accessDeniedDiv = document.getElementById('access-denied');
          const dashboardContent = document.getElementById('admin-dashboard');
          
          if (accessDeniedDiv) accessDeniedDiv.classList.remove('hidden');
          if (dashboardContent) dashboardContent.classList.add('hidden');
          return false;
        }
        
        return true;
      } catch (error) {
        console.error('Authentication check failed:', error);
        redirectToLogin();
        return false;
      }
    }
    
    function redirectToLogin() {
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/login`;
    }
    
    // Wait for auth check before proceeding
    const isAuthenticated = await checkAuth();
    if (!isAuthenticated) return;
    const newPostBtn = document.getElementById('new-post-btn');
    const settingsBtn = document.getElementById('settings-btn');
    const languagesBtn = document.getElementById('languages-btn');
    const accessDeniedDiv = document.getElementById('access-denied');
    const dashboardContent = document.getElementById('admin-dashboard');

    // Hide access denied message if authenticated
    if (accessDeniedDiv) {
      accessDeniedDiv.classList.add('hidden');
    }

    // Show dashboard content
    if (dashboardContent) {
      dashboardContent.classList.remove('hidden');
    }

    // Quick action buttons
    newPostBtn?.addEventListener('click', () => {
      // Redirect to create post page
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/admin/create-post`;
    });

    languagesBtn?.addEventListener('click', () => {
      // Redirect to language management page
      const currentLang = window.location.pathname.split('/')[1];
      window.location.href = `/${currentLang}/admin/languages`;
    });

    settingsBtn?.addEventListener('click', () => {
      alert('Settings panel will be implemented in the next update.');
    });

    // Setup filters
    setupFilters();

    // Load dashboard data - this will also load all posts
    loadDashboardData();
    checkSystemStatus();
  }

  function setupFilters() {
    const filterStatus = document.getElementById('filter-status');
    const filterLanguage = document.getElementById('filter-language');

    filterStatus?.addEventListener('change', () => loadAllPosts());
    filterLanguage?.addEventListener('change', () => loadAllPosts());
  }

  async function loadDashboardData() {
    try {
      // Pobierz język z URL
      const currentLang = window.location.pathname.split('/')[1] || 'en';
      
      // Load all posts (including drafts) from admin API using authenticated request
      const response = await AdminAuth.makeAuthenticatedRequest(API_URLS.getAdminPosts(), {
        method: 'GET'
      });

      if (response.ok) {
        const data = await response.json();
        const apiPosts = data.items || [];
        
        // Konwertuj API posts do frontend struktury
        const posts = apiPosts.map(apiPost => convertApiPostToPost(apiPost, currentLang));
        
        console.log(`Loaded ${posts.length} posts (including drafts) from admin API`);
        
        // Calculate statistics
        const totalPosts = posts.length;
        const publishedPosts = posts.filter((post) => post.is_published).length;
        const draftPosts = totalPosts - publishedPosts;
        
        // Update statistics
        const totalPostsEl = document.getElementById('total-posts');
        const publishedPostsEl = document.getElementById('published-posts');
        const draftPostsEl = document.getElementById('draft-posts');
        const recentPostsEl = document.getElementById('recent-posts-list');

        if (totalPostsEl) totalPostsEl.textContent = totalPosts.toString();
        if (publishedPostsEl) publishedPostsEl.textContent = publishedPosts.toString();
        if (draftPostsEl) draftPostsEl.textContent = draftPosts.toString();

        // Load recent posts (real data)
        if (recentPostsEl) {
          const recentPosts = posts
            .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
            .slice(0, 5);

          if (recentPosts.length > 0) {
            recentPostsEl.innerHTML = `
              <div class="space-y-3">
                ${recentPosts.map((post) => `
                  <div class="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-600 rounded-lg">
                    <div>
                      <h4 class="font-medium text-gray-900 dark:text-white">${post.title}</h4>
                      <p class="text-sm text-gray-600 dark:text-gray-400">
                        ${new Date(post.created_at).toLocaleDateString()}
                      </p>
                    </div>
                    <span class="px-2 py-1 text-xs font-medium ${post.is_published 
                      ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' 
                      : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'
                    } rounded-full">
                      ${post.is_published ? translations.published : translations.draft}
                    </span>
                  </div>
                `).join('')}
                <div class="text-center py-2">
                  <a href="/${window.location.pathname.split('/')[1]}/blog" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium">
                    ${translations.viewAllPostsArrow}
                  </a>
                </div>
              </div>
            `;
          } else {
            recentPostsEl.innerHTML = `
              <div class="text-center py-8">
                <p class="text-gray-600 dark:text-gray-400">${translations.noPostsYet}</p>
                <button onclick="window.location.href='/${window.location.pathname.split('/')[1]}/admin/create-post'" class="mt-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium">
                  ${translations.createYourFirstPost}
                </button>
              </div>
            `;
          }
        }

        // Load draft posts
        displayPostsList(posts);
        
        // Load all posts with the same data to avoid duplicate API calls
        displayAllPosts(posts);
      } else {
        const errorData = await response.text();
        throw new Error(`Failed to fetch posts: ${errorData}`);
      }
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      
      // Show error state and option to create sample post
      displayEmptyState(error.message.includes('fetch posts') ? 'api_error' : 'no_data');
    }
  }

  function displayEmptyState(type = 'no_data') {
    const totalPostsEl = document.getElementById('total-posts');
    const publishedPostsEl = document.getElementById('published-posts');
    const draftPostsEl = document.getElementById('draft-posts');
    const recentPostsEl = document.getElementById('recent-posts-list');
    const draftPostsListEl = document.getElementById('draft-posts-list');
    const allPostsListEl = document.getElementById('all-posts-list');

    if (totalPostsEl) totalPostsEl.textContent = '0';
    if (publishedPostsEl) publishedPostsEl.textContent = '0';
    if (draftPostsEl) draftPostsEl.textContent = '0';
    
    const createSamplePostBtn = type === 'no_data' ? `
      <button 
        onclick="createSamplePost()" 
        class="mt-4 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200"
      >
        Create Sample Multilingual Post
      </button>
    ` : '';
    
    const errorMessage = type === 'api_error' ? 
      'Error connecting to API. Make sure the backend server is running.' :
      'No posts found in the database.';
    
    const commonContent = `
      <div class="text-center py-8">
        <p class="text-red-600 dark:text-red-400">${errorMessage}</p>
        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
          ${type === 'api_error' ? 'Check if backend is running on port 8000' : 'Start by creating your first post'}
        </p>
        ${createSamplePostBtn}
        <button onclick="window.location.href='/${window.location.pathname.split('/')[1]}/admin/create-post'" class="mt-2 ml-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
          Create Custom Post
        </button>
      </div>
    `;

    if (recentPostsEl) recentPostsEl.innerHTML = commonContent;
    if (draftPostsListEl) draftPostsListEl.innerHTML = commonContent;
    if (allPostsListEl) allPostsListEl.innerHTML = commonContent;
  }

  function displayPostsList(posts) {
    const draftPostsListEl = document.getElementById('draft-posts-list');
    
    if (!draftPostsListEl) return;

    const draftPosts = posts.filter(post => !post.is_published);

    if (draftPosts.length > 0) {
      draftPostsListEl.innerHTML = `
        <div class="space-y-3">
          ${draftPosts.map(post => `
            <div class="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-600 rounded-lg">
              <div class="flex-1">
                <h4 class="font-medium text-gray-900 dark:text-white">${post.title}</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">
                  Created: ${new Date(post.created_at).toLocaleDateString()}
                </p>
              </div>
              <div class="flex items-center space-x-2">
                <span class="px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400 rounded-full">
                  Draft
                </span>
                <button 
                  onclick="previewPost('${post.slug}')"
                  class="flex items-center px-2 py-1 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 text-sm font-medium"
                  title="Preview Draft"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                </button>
                <button 
                  onclick="editPost(${post.id})"
                  class="flex items-center px-2 py-1 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                </button>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    } else {
      draftPostsListEl.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-600 dark:text-gray-400">No draft posts</p>
          <button onclick="window.location.href='/${window.location.pathname.split('/')[1]}/admin/create-post'" class="mt-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium">
            Create new post →
          </button>
        </div>
      `;
    }
  }

  async function checkSystemStatus() {
    const apiStatusIcon = document.getElementById('api-status-icon');
    const apiStatusText = document.getElementById('api-status-text');

    try {
      // Test API connection
      const response = await AdminAuth.makeAuthenticatedRequest(API_URLS.health(), {
        method: 'GET'
      });

      if (response.ok) {
        if (apiStatusIcon) {
          apiStatusIcon.className = 'w-3 h-3 rounded-full bg-green-500 mr-2';
        }
        if (apiStatusText) {
          apiStatusText.textContent = 'Connected';
          apiStatusText.className = 'text-sm font-medium text-green-600 ml-1';
        }
      } else {
        throw new Error('API not responding');
      }
    } catch {
      if (apiStatusIcon) {
        apiStatusIcon.className = 'w-3 h-3 rounded-full bg-red-500 mr-2';
      }
      if (apiStatusText) {
        apiStatusText.textContent = 'Disconnected';
        apiStatusText.className = 'text-sm font-medium text-red-600 ml-1';
      }
    }
  }

  function displayAllPosts(posts) {
    const allPostsListEl = document.getElementById('all-posts-list');
    const paginationEl = document.getElementById('posts-pagination');
    
    if (!allPostsListEl) return;

    if (posts.length > 0) {
      allPostsListEl.innerHTML = `
        <div class="space-y-4">
          ${posts.map(post => `
            <div class="flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-800">
              <div class="flex-1">
                <div class="flex items-center space-x-3">
                  <h4 class="font-medium text-gray-900 dark:text-white">${post.title}</h4>
                  <span class="px-2 py-1 text-xs font-medium ${post.is_published 
                    ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' 
                    : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'
                  } rounded-full">
                    ${post.is_published ? 'Published' : 'Draft'}
                  </span>
                  ${post.language ? `<span class="px-2 py-1 text-xs bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400 rounded-full">${post.language.toUpperCase()}</span>` : ''}
                </div>
                <div class="mt-1 flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                  <span>Created: ${new Date(post.created_at).toLocaleDateString()}</span>
                  ${post.category ? `<span>Category: ${post.category}</span>` : ''}
                  ${post.author ? `<span>Author: ${post.author}</span>` : ''}
                </div>
              </div>
              <div class="flex items-center space-x-3">
                <button 
                  onclick="previewPost('${post.slug}')"
                  class="flex items-center px-3 py-1 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 text-sm font-medium border border-gray-300 dark:border-gray-600 rounded-md hover:border-blue-300 dark:hover:border-blue-500 transition-colors"
                  title="Preview Post"
                >
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                  Preview
                </button>
                <button 
                  onclick="editPost(${post.id})"
                  class="flex items-center px-3 py-1 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium border border-blue-300 dark:border-blue-500 rounded-md hover:border-blue-400 dark:hover:border-blue-400 transition-colors"
                >
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  Edit
                </button>
                <button 
                  onclick="deletePost(${post.id}, '${post.title}')"
                  class="flex items-center px-3 py-1 text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 text-sm font-medium border border-red-300 dark:border-red-500 rounded-md hover:border-red-400 dark:hover:border-red-400 transition-colors"
                >
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Delete
                </button>
              </div>
            </div>
          `).join('')}
        </div>
      `;
      
      // Clear pagination since we're showing all posts initially
      if (paginationEl) paginationEl.innerHTML = '';
    } else {
      allPostsListEl.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-600 dark:text-gray-400">No posts found</p>
          <button onclick="window.location.href='/${window.location.pathname.split('/')[1]}/admin/create-post'" class="mt-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium">
            Create your first post →
          </button>
        </div>
      `;
      if (paginationEl) paginationEl.innerHTML = '';
    }
  }

  async function loadAllPosts(page = 1) {
    const allPostsListEl = document.getElementById('all-posts-list');
    const paginationEl = document.getElementById('posts-pagination');
    const filterStatus = document.getElementById('filter-status')?.value || 'all';
    const filterLanguage = document.getElementById('filter-language')?.value || 'all';
    
    if (!allPostsListEl) return;

    // Show loading
    allPostsListEl.innerHTML = `
      <div class="flex items-center justify-center py-8">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
        <span class="ml-2 text-gray-600 dark:text-gray-400">Loading posts...</span>
      </div>
    `;

    try {
      // Build query parameters
      const params = new URLSearchParams({
        page: page.toString(),
        per_page: '10'
      });

      if (filterStatus !== 'all') {
        params.append('published', filterStatus === 'published' ? 'true' : 'false');
      }
      
      if (filterLanguage !== 'all') {
        params.append('language', filterLanguage);
      }

      const response = await AdminAuth.makeAuthenticatedRequest(`${API_URLS.getAdminPosts()}?${params}`, {
        method: 'GET'
      });

      if (response.ok) {
        const data = await response.json();
        const posts = data.items || [];
        const totalPages = data.pages || 1;
        
        if (posts.length > 0) {
          allPostsListEl.innerHTML = `
            <div class="space-y-4">
              ${posts.map(post => `
                <div class="flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-800">
                  <div class="flex-1">
                    <div class="flex items-center space-x-3">
                      <h4 class="font-medium text-gray-900 dark:text-white">${post.title}</h4>
                      <span class="px-2 py-1 text-xs font-medium ${post.is_published 
                        ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' 
                        : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'
                      } rounded-full">
                        ${post.is_published ? 'Published' : 'Draft'}
                      </span>
                      ${post.language ? `<span class="px-2 py-1 text-xs bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400 rounded-full">${post.language.toUpperCase()}</span>` : ''}
                    </div>
                    <div class="mt-1 flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                      <span>Created: ${new Date(post.created_at).toLocaleDateString()}</span>
                      ${post.category ? `<span>Category: ${post.category}</span>` : ''}
                      ${post.author ? `<span>Author: ${post.author}</span>` : ''}
                    </div>
                  </div>
                  <div class="flex items-center space-x-3">
                    <button 
                      onclick="window.open('/${window.location.pathname.split('/')[1]}/blog/${post.slug}', '_blank')"
                      class="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 text-sm font-medium"
                      title="View Post"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                    </button>
                    <button 
                      onclick="editPost(${post.id})"
                      class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium"
                    >
                      Edit
                    </button>
                    <button 
                      onclick="deletePost(${post.id}, '${post.title}')"
                      class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 text-sm font-medium"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              `).join('')}
            </div>
          `;

          // Add pagination
          if (totalPages > 1) {
            const paginationHTML = Array.from({length: totalPages}, (_, i) => i + 1)
              .map(pageNum => `
                <button 
                  onclick="loadAllPosts(${pageNum})"
                  class="px-3 py-1 text-sm ${pageNum === page 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-white dark:bg-slate-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-700'
                  } border border-gray-300 dark:border-gray-600 rounded-md"
                >
                  ${pageNum}
                </button>
              `).join('');
            
            if (paginationEl) {
              paginationEl.innerHTML = `<div class="flex space-x-1">${paginationHTML}</div>`;
            }
          } else if (paginationEl) {
            paginationEl.innerHTML = '';
          }
        } else {
          allPostsListEl.innerHTML = `
            <div class="text-center py-8">
              <p class="text-gray-600 dark:text-gray-400">No posts found</p>
              <button onclick="window.location.href='/${window.location.pathname.split('/')[1]}/admin/create-post'" class="mt-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium">
                Create your first post →
              </button>
            </div>
          `;
          if (paginationEl) paginationEl.innerHTML = '';
        }
      } else {
        throw new Error('Failed to fetch posts');
      }
    } catch (error) {
      console.error('Error loading all posts:', error);
      allPostsListEl.innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-600 dark:text-red-400">${translations.errorLoadingData}</p>
          <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">${translations.checkApiServer}</p>
        </div>
      `;
      if (paginationEl) paginationEl.innerHTML = '';
    }
  }

  // Global functions for post actions
  window.previewPost = function(slug) {
    const currentLang = window.location.pathname.split('/')[1];
    // Always add language prefix to ensure proper multilingual URL structure
    window.open(`/${currentLang}/post/${slug}`, '_blank');
  };

  window.editPost = function(postId) {
    const currentLang = window.location.pathname.split('/')[1];
    window.location.href = `/${currentLang}/admin/edit-post/${postId}`;
  };

  window.deletePost = function(postId, postTitle) {
    if (confirm(`${translations.deleteConfirmation} "${postTitle}"? ${translations.actionCannotBeUndone}`)) {
      deletePostById(postId);
    }
  };

  // Function to create sample multilingual post
  window.createSamplePost = async function() {
    try {
      const button = event.target;
      button.textContent = translations.creating;
      button.disabled = true;
      
      await AdminAuth.createSamplePost();
      
      alert('Sample multilingual post created successfully!');
      
      // Reload dashboard data
      loadDashboardData();
    } catch (error) {
      console.error('Error creating sample post:', error);
      alert(`Error creating sample post: ${error.message}`);
    } finally {
      const button = event.target;
      button.textContent = translations.createSamplePost;
      button.disabled = false;
    }
  };

  async function deletePostById(postId) {
    try {
      const response = await AdminAuth.makeAuthenticatedRequest(API_URLS.deletePost(postId), {
        method: 'DELETE'
      });

      if (response.ok) {
        alert(translations.postDeletedSuccessfully);
        loadAllPosts(); // Refresh the list
        loadDashboardData(); // Refresh stats
      } else {
        throw new Error('Failed to delete post');
      }
    } catch (error) {
      console.error('Error deleting post:', error);
      alert(translations.errorDeletingPost);
    }
  }

  // Initialize on page load and navigation
  document.addEventListener('DOMContentLoaded', initAdminDashboard);
  document.addEventListener('astro:page-load', initAdminDashboard);
</script>
