---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('auth.title'),
  description: t('auth.subtitle'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<Layout metadata={metadata}>
  <WidgetWrapper 
    id="login" 
    containerClass="max-w-md mx-auto min-h-screen flex items-center"
  >
    <Fragment slot="bg">
      <div class="absolute inset-0 bg-gray-50 dark:bg-gray-900"></div>
    </Fragment>
    
    <div class="w-full space-y-8">
      <Headline 
        title={t('auth.title')}
        subtitle={t('auth.subtitle')}
        classes={{
          container: 'text-center',
          title: 'text-3xl font-extrabold',
          subtitle: 'text-sm text-gray-600 dark:text-gray-400'
        }}
      />
      
      <!-- Messages -->
      <!-- Using StaticNotifications instead of inline messages -->
      
      <!-- Login Form -->
      <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <form id="login-form" class="space-y-6">
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('auth.email')}
            </label>
            <input 
              id="email" 
              name="email" 
              type="email" 
              required 
              autocomplete="email"
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('auth.email')}
            />
          </div>
          
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('auth.password')}
            </label>
            <input 
              id="password" 
              name="password" 
              type="password" 
              required 
              autocomplete="current-password"
              class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:border-blue-500 focus:ring-blue-500 transition-colors"
              placeholder={t('auth.password')}
            />
          </div>
          
          <div class="mt-6">
            <button 
              type="submit" 
              id="login-button"
              class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
            >
              <span id="button-text">{t('auth.loginButton')}</span>
              <svg id="loading-spinner" class="hidden animate-spin -mr-1 ml-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </button>
          </div>
        </form>
        
        <div class="mt-6 space-y-4">
          <div class="text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              {t('auth.dontHaveAccount')} 
              <a href={`/${lang}/register`} class="text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 font-medium">
                {t('auth.signUpHere')}
              </a>
            </p>
          </div>
          
          <div class="text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              <a href={`/${lang}/forgot-password`} class="text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                {t('auth.forgotPassword')}
              </a>
            </p>
          </div>
          
          <div class="text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              <a href={`/${lang}/verify-email`} class="text-green-600 hover:text-green-500 dark:text-green-400 dark:hover:text-green-300">
                {t('auth.verifyAccount')}
              </a>
            </p>
          </div>
        </div>
      </div>
    </div>
  </WidgetWrapper>
</Layout>

<script>
  import { AdminAuth } from '../../utils/adminAuth';
  
  // Type declarations for StaticNotifications
  declare global {
    interface Window {
      StaticNotifications?: {
        error: (message: string, duration?: number) => string | null;
        success: (message: string, duration?: number) => string | null;
        info: (message: string, duration?: number) => string | null;
        warning: (message: string, duration?: number) => string | null;
      };
    }
  }
  
  function initLoginPage() {
    // Check if already logged in
    if (AdminAuth.isAuthenticated()) {
      const currentLang = window.location.pathname.split('/')[1];
      // Just redirect to blog since getCurrentUser doesn't exist
      window.location.href = `/${currentLang}/blog`;
      return;
    }
    
    // Check for verification success message
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('verified') === 'true') {
      window.StaticNotifications?.success('Email verified successfully! You can now log in.');
    }
    
    const loginForm = document.getElementById('login-form') as HTMLFormElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const passwordInput = document.getElementById('password') as HTMLInputElement;
    const loginButton = document.getElementById('login-button') as HTMLButtonElement;
    const buttonText = document.getElementById('button-text') as HTMLSpanElement;
    const spinner = document.getElementById('loading-spinner') as HTMLElement;
    
    function showError(message: string) {
      window.StaticNotifications?.error(message);
    }
    
    function showSuccess(message: string) {
      window.StaticNotifications?.success(message);
    }
    
    function hideMessages() {
      // Not needed with StaticNotifications - they auto-dismiss
    }
    
    loginForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Prevent double submission
      if (loginButton.disabled) return;
      
      // Show loading state
      loginButton.disabled = true;
      buttonText.textContent = 'Signing in...';
      spinner.classList.remove('hidden');
      hideMessages();
      
      try {
        const email = emailInput.value.trim();
        const password = passwordInput.value;
        
        if (!email || !password) {
          throw new Error('Please fill in all fields');
        }
        
        const user = await AdminAuth.login(email, password);
        
        // Success
        showSuccess('Login successful! Redirecting...');
        
        // Get current language from URL
        const currentLang = window.location.pathname.split('/')[1];
        
        // Redirect based on user role after short delay
        setTimeout(() => {
          const redirectUrl = AdminAuth.isUserAdmin(user)
            ? `/${currentLang}/admin/dashboard` 
            : `/${currentLang}/blog`;
          window.location.href = redirectUrl;
        }, 1000);
        
      } catch (error) {
        const message = error instanceof Error ? error.message : 'Login failed';
        
        // Handle specific error cases - check for keywords in the detailed message
        if (message.includes('email not verified') || message.includes('not verified')) {
          // Show original detailed message but add redirect
          showError(message);
          setTimeout(() => {
            const currentLang = window.location.pathname.split('/')[1];
            const emailValue = emailInput.value.trim();
            window.location.href = `/${currentLang}/verify-email?email=${encodeURIComponent(emailValue)}`;
          }, 3000);
        } else if (message.includes('Too many') || message.includes('429')) {
          // Rate limiting - show detailed message
          showError(message);
        } else {
          // Show the detailed error message from server
          showError(message);
        }
        
        // Focus back to email if it was an auth error
        if (message.includes('Invalid') || message.includes('password')) {
          emailInput.focus();
        }
      } finally {
        // Reset button state
        loginButton.disabled = false;
        buttonText.textContent = 'Sign In';
        spinner.classList.add('hidden');
      }
    });
    
    // Auto-focus email field
    emailInput?.focus();
  }
  
  // Initialize only once - prevent duplicate event listeners
  let initialized = false;
  
  function safeInit() {
    if (initialized) return;
    initialized = true;
    initLoginPage();
  }
  
  // Initialize on both DOMContentLoaded and astro:page-load
  document.addEventListener('DOMContentLoaded', safeInit);
  document.addEventListener('astro:page-load', safeInit);
</script>
