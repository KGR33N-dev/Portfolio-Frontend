---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

const metadata = {
  title: t('account.title'),
  description: t('account.subtitle'),
  robots: {
    index: false,
    follow: false,
  },
};
---

<Layout metadata={metadata}>
  <WidgetWrapper id="account-page" containerClass="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
    <!-- Header with navigation -->
    <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 mb-8">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <Headline 
          title={t('account.title')}
          subtitle={t('account.subtitle')}
          classes={{
            container: '',
            title: 'text-2xl font-bold text-gray-900 dark:text-white',
            subtitle: 'text-sm text-gray-600 dark:text-gray-400 mt-1'
          }}
        />
        <a 
          href={`/${lang}/admin/dashboard`}
          class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 font-medium"
        >
          ← Dashboard
        </a>
      </div>
    </div>

    <!-- Messages -->
    <div id="error-message" class="hidden bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-4 py-3 rounded mb-6"></div>
    <div id="success-message" class="hidden bg-green-100 dark:bg-green-900/20 border border-green-400 text-green-700 dark:text-green-400 px-4 py-3 rounded mb-6"></div>

    <!-- Main Content -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
      <!-- User Info Card -->
      <div class="lg:col-span-1">
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-6">{t('account.personalInfo')}</h3>
          
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('auth.email')}</label>
              <div id="user-email" class="py-2 px-3 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200">admin@example.com</div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('auth.username')}</label>
              <div id="user-username" class="py-2 px-3 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200">admin</div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('auth.fullName')}</label>
              <div id="user-fullname" class="py-2 px-3 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200">Administrator</div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('account.role')}</label>
              <div id="user-role" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300">Administrator</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Account Management Forms -->
      <div class="lg:col-span-2 space-y-6">
        
        <!-- Change Username Form -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">{t('account.changeUsername')}</h3>
          </div>
          <div class="p-6">
            <form id="username-form">
              <div class="space-y-4">
                <div>
                  <label for="new-username" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('auth.username')}</label>
                  <input 
                    type="text" 
                    id="new-username" 
                    name="username"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={t('account.newUsernamePlaceholder')}
                    value="admin"
                    pattern="[a-zA-Z0-9_-]+"
                    minlength="3"
                    maxlength="50"
                    required
                  />
                  <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">3-50 znaków: litery, cyfry, _ i -</p>
                </div>
                <div>
                  <label for="username-current-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Obecne hasło</label>
                  <input 
                    type="password" 
                    id="username-current-password" 
                    name="current_password"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder="Wpisz obecne hasło"
                    required
                  />
                </div>
              </div>
              <div class="mt-6">
                <button 
                  type="submit" 
                  class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors duration-200"
                >
                  {t('account.updateUsername')}
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Change Password Form -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">{t('account.changePassword')}</h3>
          </div>
          <div class="p-6">
            <form id="password-form">
              <div class="space-y-4">
                <div>
                  <label for="current-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('account.currentPassword')}</label>
                  <input 
                    type="password" 
                    id="current-password" 
                    name="currentPassword"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={t('account.currentPasswordPlaceholder')}
                    required
                  />
                </div>
                <div>
                  <label for="new-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('account.newPassword')}</label>
                  <input 
                    type="password" 
                    id="new-password" 
                    name="newPassword"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={t('account.newPasswordPlaceholder')}
                    minlength="8"
                    required
                  />
                  <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Minimum 8 znaków</p>
                </div>
                <div>
                  <label for="confirm-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('account.confirmNewPassword')}</label>
                  <input 
                    type="password" 
                    id="confirm-password" 
                    name="confirmPassword"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={t('account.confirmPasswordPlaceholder')}
                    required
                  />
                </div>
              </div>
              <div class="mt-6">
                <button 
                  type="submit" 
                  class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors duration-200"
                >
                  {t('account.updatePassword')}
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Change Email Form -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">Zmień adres email</h3>
          </div>
          <div class="p-6">
            <form id="email-form">
              <div class="space-y-4">
                <div>
                  <label for="new-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Nowy adres email</label>
                  <input 
                    type="email" 
                    id="new-email" 
                    name="email"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder="nowy@email.com"
                    required
                  />
                </div>
                <div>
                  <label for="email-current-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Obecne hasło</label>
                  <input 
                    type="password" 
                    id="email-current-password" 
                    name="current_password"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder="Wpisz obecne hasło"
                    required
                  />
                </div>
              </div>
              <div class="mt-6">
                <button 
                  type="submit" 
                  class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors duration-200"
                >
                  Zaktualizuj email
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Delete Account Form -->
        <div class="bg-white dark:bg-slate-900 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-red-600 dark:text-red-400">{t('account.deleteAccount')}</h3>
          </div>
          <div class="p-6">
            <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-md p-4 mb-4">
              <p class="text-sm text-red-800 dark:text-red-300">
                {t('account.confirmDelete')}
              </p>
            </div>
            <form id="delete-form">
              <div class="space-y-4">
                <div>
                  <label for="delete-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('auth.password')}</label>
                  <input 
                    type="password" 
                    id="delete-password" 
                    name="password"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white"
                    placeholder={t('account.currentPasswordPlaceholder')}
                    required
                  />
                </div>
                <div>
                  <label for="delete-confirmation" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Wpisz "DELETE_MY_ACCOUNT" aby potwierdzić</label>
                  <input 
                    type="text" 
                    id="delete-confirmation" 
                    name="confirmation"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white"
                    placeholder="DELETE_MY_ACCOUNT"
                    required
                  />
                </div>
              </div>
              <div class="mt-6">
                <button 
                  type="submit" 
                  class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors duration-200"
                  disabled
                  id="delete-submit"
                >
                  {t('account.deleteAccount')}
                </button>
              </div>
            </form>
          </div>
        </div>
        
      </div>
    </div>
  </WidgetWrapper>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Account page loaded successfully');
    
    // API Configuration
    const API_BASE = 'http://localhost:8000/api';
    
    // Get auth token from localStorage
    function getToken() {
      const token = localStorage.getItem('access_token'); // Zmienione z 'authToken' na 'access_token'
      console.log('🔑 Token from localStorage:', token ? `${token.substring(0, 20)}...` : 'null'); // Debug log
      if (!token || token === 'null' || token === 'undefined') {
        console.log('❌ No valid token found');
        return null;
      }
      return token;
    }
    
    // Check if user is authenticated
    function checkAuth() {
      const token = getToken();
      if (!token || token === 'null' || token === 'undefined') {
        console.log('No valid token found, redirecting to login');
        alert('Sesja wygasła. Zostaniesz przekierowany do strony logowania.');
        window.location.href = `/${window.location.pathname.split('/')[1]}/auth/login`;
        return false;
      }
      return true;
    }
    
    // API Headers
    function getHeaders(): Record<string, string> {
      const token = getToken();
      if (!token) {
        console.log('❌ No token available for API call');
        return {
          'Content-Type': 'application/json'
        };
      }
      
      console.log('✅ Adding authorization header');
      return {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };
    }
    
    // Profile Service
    const ProfileService = {
      async getProfile() {
        try {
          console.log('🔄 Starting profile fetch...');
          const headers = getHeaders();
          console.log('📤 Request headers:', headers);
          
          const response = await fetch(`${API_BASE}/profile/`, {
            headers
          });
          
          console.log('📥 Response status:', response.status);
          const data = await response.json();
          console.log('📦 Response data:', data);
          
          if (response.ok) {
            return { success: true, data };
          } else {
            return { success: false, error: data.detail || 'Błąd pobierania profilu' };
          }
        } catch (err) {
          console.error('❌ Profile fetch error:', err);
          return { success: false, error: 'Błąd połączenia z serwerem' };
        }
      },

      async changePassword(currentPassword, newPassword, confirmPassword) {
        try {
          const response = await fetch(`${API_BASE}/profile/change-password`, {
            method: 'PUT',
            headers: getHeaders(),
            body: JSON.stringify({
              current_password: currentPassword,
              new_password: newPassword,
              confirm_password: confirmPassword
            })
          });
          const data = await response.json();
          return { success: response.ok, data, error: data.detail };
        } catch (error) {
          return { success: false, error: 'Błąd połączenia z serwerem' };
        }
      },

      async changeUsername(newUsername, currentPassword) {
        try {
          const response = await fetch(`${API_BASE}/profile/change-username`, {
            method: 'PUT',
            headers: getHeaders(),
            body: JSON.stringify({
              new_username: newUsername,
              current_password: currentPassword
            })
          });
          const data = await response.json();
          return { success: response.ok, data, error: data.detail };
        } catch (error) {
          return { success: false, error: 'Błąd połączenia z serwerem' };
        }
      },

      async changeEmail(newEmail, currentPassword) {
        try {
          const response = await fetch(`${API_BASE}/profile/change-email`, {
            method: 'PUT',
            headers: getHeaders(),
            body: JSON.stringify({
              new_email: newEmail,
              current_password: currentPassword
            })
          });
          const data = await response.json();
          return { success: response.ok, data, error: data.detail };
        } catch (error) {
          return { success: false, error: 'Błąd połączenia z serwerem' };
        }
      },

      async deleteAccount(currentPassword) {
        try {
          const response = await fetch(`${API_BASE}/profile/delete-account`, {
            method: 'DELETE',
            headers: getHeaders(),
            body: JSON.stringify({
              current_password: currentPassword,
              confirmation: "DELETE_MY_ACCOUNT"
            })
          });
          const data = await response.json();
          return { success: response.ok, data, error: data.detail };
        } catch (error) {
          return { success: false, error: 'Błąd połączenia z serwerem' };
        }
      }
    };
    
    // DOM Elements
    const usernameForm = document.getElementById('username-form');
    const passwordForm = document.getElementById('password-form');
    const emailForm = document.getElementById('email-form');
    const deleteForm = document.getElementById('delete-form');
    const deleteConfirmationInput = document.getElementById('delete-confirmation');
    const deleteSubmitBtn = document.getElementById('delete-submit');
    
    // Load profile data on page load
    console.log('🎯 Account page initialization started');
    console.log('📦 All localStorage keys:', Object.keys(localStorage));
    console.log('🔍 Checking for tokens in localStorage:');
    console.log('  authToken:', localStorage.getItem('authToken'));
    console.log('  access_token:', localStorage.getItem('access_token')); // Główny token
    console.log('  token:', localStorage.getItem('token'));
    console.log('  accessToken:', localStorage.getItem('accessToken'));
    console.log('  jwt:', localStorage.getItem('jwt'));
    
    loadProfileData();
    
    async function loadProfileData() {
      console.log('🚀 Starting profile data load...');
      
      // Check if user is authenticated first
      if (!checkAuth()) {
        console.log('❌ Authentication check failed');
        return;
      }
      
      console.log('✅ Authentication check passed');
      const result = await ProfileService.getProfile();
      
      if (result.success) {
        console.log('✅ Profile loaded successfully:', result.data);
        updateProfileDisplay(result.data);
      } else {
        console.log('❌ Profile load failed:', result.error);
        showMessage(result.error, 'error');
        // If unauthorized, redirect to login
        if (result.error.includes('401') || result.error.includes('Unauthorized')) {
          setTimeout(() => {
            checkAuth(); // This will redirect to login
          }, 2000);
        }
      }
    }
    
    function updateProfileDisplay(profile) {
      const elements = {
        'user-email': profile.email,
        'user-username': profile.username,
        'user-fullname': profile.full_name || 'Nie podano',
        'user-role': profile.role?.display_name || profile.role?.name || 'User'
      };
      
      Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = value;
        }
      });
      
      // Update form fields
      const newUsernameInput = document.getElementById('new-username') as HTMLInputElement;
      const newEmailInput = document.getElementById('new-email') as HTMLInputElement;
      if (newUsernameInput) newUsernameInput.value = profile.username;
      if (newEmailInput) newEmailInput.value = profile.email;
    }
    
    // Username form handler
    if (usernameForm) {
      usernameForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Check auth before proceeding
        if (!checkAuth()) {
          return;
        }
        
        const formData = new FormData(this as HTMLFormElement);
        const newUsername = formData.get('username') as string;
        const currentPassword = formData.get('current_password') as string;
        
        if (!newUsername || !currentPassword) {
          showMessage('Wypełnij wszystkie pola', 'error');
          return;
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), true);
        
        const result = await ProfileService.changeUsername(newUsername, currentPassword);
        
        if (result.success) {
          showMessage(result.data.message, 'success');
          loadProfileData(); // Refresh profile data
          const passwordInput = this.querySelector('input[name="current_password"]') as HTMLInputElement;
          if (passwordInput) passwordInput.value = '';
        } else {
          showMessage(result.error, 'error');
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), false);
      });
    }
    
    // Password form handler
    if (passwordForm) {
      passwordForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Check auth before proceeding
        if (!checkAuth()) {
          return;
        }
        
        const formData = new FormData(this as HTMLFormElement);
        const currentPassword = formData.get('currentPassword') as string;
        const newPassword = formData.get('newPassword') as string;
        const confirmPassword = formData.get('confirmPassword') as string;
        
        if (!currentPassword || !newPassword || !confirmPassword) {
          showMessage('Wypełnij wszystkie pola', 'error');
          return;
        }
        
        if (newPassword !== confirmPassword) {
          showMessage('Nowe hasła nie są identyczne', 'error');
          return;
        }
        
        if (typeof newPassword === 'string' && newPassword.length < 8) {
          showMessage('Nowe hasło musi mieć minimum 8 znaków', 'error');
          return;
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), true);
        
        const result = await ProfileService.changePassword(currentPassword, newPassword, confirmPassword);
        
        if (result.success) {
          showMessage(result.data.message, 'success');
          const form = this as HTMLFormElement;
          if (form.reset) form.reset(); // Clear form
        } else {
          showMessage(result.error, 'error');
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), false);
      });
    }
    
    // Email form handler
    if (emailForm) {
      emailForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Check auth before proceeding
        if (!checkAuth()) {
          return;
        }
        
        const formData = new FormData(this as HTMLFormElement);
        const newEmail = formData.get('email') as string;
        const currentPassword = formData.get('current_password') as string;
        
        if (!newEmail || !currentPassword) {
          showMessage('Wypełnij wszystkie pola', 'error');
          return;
        }
        
        if (typeof newEmail === 'string' && !isValidEmail(newEmail)) {
          showMessage('Nieprawidłowy format email', 'error');
          return;
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), true);
        
        const result = await ProfileService.changeEmail(newEmail, currentPassword);
        
        if (result.success) {
          showMessage(result.data.message, 'success');
          if (result.data.requires_verification) {
            showMessage('Email wymaga ponownej weryfikacji. Sprawdź swoją skrzynkę pocztową.', 'info');
          }
          loadProfileData(); // Refresh profile data
          const passwordInput = this.querySelector('input[name="current_password"]') as HTMLInputElement;
          if (passwordInput) passwordInput.value = '';
        } else {
          showMessage(result.error, 'error');
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), false);
      });
    }
    
    // Delete form handler
    if (deleteForm) {
      deleteForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Check auth before proceeding
        if (!checkAuth()) {
          return;
        }
        
        if (!confirm('⚠️ OSTRZEŻENIE: Ta operacja jest NIEODWRACALNA!\n\nCzy na pewno chcesz usunąć swoje konto?\nWszystkie Twoje dane zostaną permanentnie utracone.')) {
          return;
        }
        
        const formData = new FormData(this as HTMLFormElement);
        const password = formData.get('password') as string;
        const confirmation = formData.get('confirmation') as string;
        
        if (!password) {
          showMessage('Wpisz hasło do potwierdzenia', 'error');
          return;
        }
        
        if (typeof confirmation === 'string' && confirmation.trim().toUpperCase() !== 'DELETE_MY_ACCOUNT') {
          showMessage('Wpisz dokładnie: DELETE_MY_ACCOUNT', 'error');
          return;
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), true);
        
        const result = await ProfileService.deleteAccount(password);
        
        if (result.success) {
          showMessage(result.data.message, 'success');
          // Redirect to logout after successful deletion
          setTimeout(() => {
            localStorage.removeItem('access_token'); // Zmienione z 'authToken' na 'access_token'
            window.location.href = '/login';
          }, 3000);
        } else {
          showMessage(result.error, 'error');
        }
        
        setButtonLoading(this.querySelector('button[type="submit"]'), false);
      });
    }
    
    // Enable delete button when confirmation is typed
    if (deleteConfirmationInput && deleteSubmitBtn) {
      deleteConfirmationInput.addEventListener('input', function() {
        const input = this as HTMLInputElement;
        const button = deleteSubmitBtn as HTMLButtonElement;
        const isValid = input.value.trim().toUpperCase() === 'DELETE_MY_ACCOUNT';
        button.disabled = !isValid;
        button.className = isValid 
          ? 'px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors duration-200'
          : 'px-4 py-2 bg-gray-400 text-gray-700 rounded-lg font-medium cursor-not-allowed opacity-50';
      });
    }
    
    // Utility functions
    function setButtonLoading(button, loading) {
      if (!button) return;
      
      if (loading) {
        button.disabled = true;
        button.dataset.originalText = button.textContent;
        button.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mx-auto"></div>';
      } else {
        button.disabled = false;
        button.textContent = button.dataset.originalText || button.textContent;
      }
    }
    
    function isValidEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }
    
    // Message display function
    function showMessage(message, type) {
      const errorDiv = document.getElementById('error-message');
      const successDiv = document.getElementById('success-message');
      
      if (!errorDiv || !successDiv) return;
      
      // Hide both messages first
      errorDiv.classList.add('hidden');
      successDiv.classList.add('hidden');
      
      // Show appropriate message
      if (type === 'error') {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      } else {
        successDiv.textContent = message;
        successDiv.classList.remove('hidden');
      }
      
      // Auto-hide after 8 seconds
      setTimeout(() => {
        errorDiv.classList.add('hidden');
        successDiv.classList.add('hidden');
      }, 8000);
    }
  });
</script>

<style>
  /* Form field focus animations */
  input:focus {
    animation: focusGlow 0.3s ease-in-out;
  }

  @keyframes focusGlow {
    0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.5); }
    100% { box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1); }
  }

  /* Button loading state */
  button:disabled {
    cursor: not-allowed;
    opacity: 0.7;
  }

  /* Smooth transitions */
  .transition-all {
    transition: all 0.2s ease-in-out;
  }
</style>
