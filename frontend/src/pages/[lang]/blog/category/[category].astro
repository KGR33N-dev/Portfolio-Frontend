---
import Layout from '~/layouts/PageLayout.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';
import { API_URLS } from '~/config/api';
import Grid from '~/components/blog/Grid.astro';
import Pagination from '~/components/blog/Pagination.astro';
import { convertApiPostToPost } from '~/types/blog';
import type { Post, BlogApiResponse } from '~/types/blog';

export async function getStaticPaths() {
  const paths: Array<{
    params: { lang: string; category: string };
    props: { category: string };
  }> = [];
  
  // Generate paths for each language
  for (const lang of Object.keys(languages)) {
    try {
      // Fetch all posts to get available categories
      const response = await fetch(API_URLS.getAllPosts());
      
      if (response.ok) {
        const data: BlogApiResponse = await response.json();
        const posts = data.items || [];
        
        // Collect all unique categories
        const categories = new Set<string>();
        posts.forEach((post: Record<string, unknown>) => {
          if (post.category && typeof post.category === 'string') {
            categories.add(post.category.toLowerCase().replace(/\s+/g, '-'));
          }
        });
        
        // Generate paths for each category
        categories.forEach(category => {
          paths.push({
            params: { 
              lang,
              category
            },
            props: { category }
          });
        });
      }
    } catch (error) {
      console.error(`Error fetching posts for ${lang}:`, error);
    }
  }
  
  return paths;
}

const { lang, category } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

// Get current page from URL params or query
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');

// Fetch blog posts in this category
let posts: Post[] = [];
let totalPosts = 0;
let totalPages = 1;
let error: string | null = null;
let categoryTitle = category || '';

try {
  const apiUrl = API_URLS.getAllPosts({
    page: currentPage,
    per_page: 12,
    language: lang,
    category: categoryTitle,
    published_only: true,
    sort: 'published_at',
    order: 'desc'
  });
  console.log('🔍 Fetching from API:', apiUrl);
  
  const response = await fetch(apiUrl);
  
  if (response.ok) {
    const data: BlogApiResponse = await response.json();
    
    // Posts are already filtered by category on the backend
    posts = data.items.map(post => convertApiPostToPost(post, lang));
    totalPosts = data.total;
    totalPages = data.pages;
    
    // Get the actual category title from the first post
    if (posts.length > 0) {
      categoryTitle = posts[0].category || category;
    }
    
    console.log('✅ Posts loaded:', posts.length);
  } else {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
} catch (e) {
  console.error('❌ Error fetching posts:', e);
  error = e instanceof Error ? e.message : 'Unknown error';
}

const metadata = {
  title: `${t('blog.postsByCategory')} "${categoryTitle}" ${currentPage > 1 ? `- ${t('blog.page')} ${currentPage}` : ''}`,
  description: `${t('blog.postsByCategory')} "${categoryTitle}". ${t('blog.description')}`,
  robots: {
    index: true,
    follow: true,
  },
  openGraph: {
    type: 'website',
    title: `${t('blog.postsByCategory')} "${categoryTitle}"`,
    description: `${t('blog.postsByCategory')} "${categoryTitle}". ${t('blog.description')}`,
  },
};
---

<Layout metadata={metadata}>
  <section class="px-4 md:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-7xl">
    <!-- Header -->
    <div class="text-center mb-12">
      <div class="flex items-center justify-center mb-4">
        <span class="text-sm font-semibold text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900/30 px-4 py-2 rounded-full">
          {categoryTitle}
        </span>
      </div>
      <h1 class="text-4xl md:text-5xl font-bold leading-tight mb-4 font-heading">
        {t('blog.postsByCategory')} "{categoryTitle}"
      </h1>
      <p class="text-xl text-muted max-w-3xl mx-auto">
        {posts.length} {posts.length === 1 ? 'post' : 'posts'} {t('blog.categories').toLowerCase()}
      </p>
    </div>

    <!-- Breadcrumb -->
    <nav class="flex mb-8 justify-center" aria-label="Breadcrumb">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href={`/${lang}`} class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white">
            <svg class="w-3 h-3 mr-2.5" fill="currentColor" viewBox="0 0 20 20">
              <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
            </svg>
            Home
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 text-gray-400 mx-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <a href={`/${lang}/blog`} class="ml-1 text-sm font-medium text-gray-700 hover:text-blue-600 md:ml-2 dark:text-gray-400 dark:hover:text-white">
              {t('blog.title')}
            </a>
          </div>
        </li>
        <li aria-current="page">
          <div class="flex items-center">
            <svg class="w-3 h-3 text-gray-400 mx-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2 dark:text-gray-400">
              {categoryTitle}
            </span>
          </div>
        </li>
      </ol>
    </nav>

    <!-- Blog Posts Section -->
    {error ? (
      <div class="text-center py-16">
        <div class="bg-red-50 dark:bg-red-900/20 rounded-lg p-8 max-w-2xl mx-auto">
          <div class="text-red-600 dark:text-red-400 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-red-800 dark:text-red-200 mb-4">{t('blog.errorTitle')}</h2>
          <p class="text-red-700 dark:text-red-300">{error}</p>
        </div>
      </div>
    ) : posts.length === 0 ? (
      <div class="text-center py-16">
        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-8 max-w-2xl mx-auto">
          <div class="text-gray-600 dark:text-gray-400 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
            </svg>
          </div>
          <h2 class="text-3xl font-bold text-default mb-4">{t('blog.noPostsInCategory')}</h2>
          <p class="text-lg text-muted mb-6">{categoryTitle}</p>
          <a 
            href={`/${lang}/blog`}
            class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            {t('blog.allPosts')}
          </a>
        </div>
      </div>
    ) : (
      <>
        <!-- Posts Grid -->
        <Grid posts={posts} lang={lang} />
        
        <!-- Pagination -->
        {totalPages > 1 && (
          <div class="mt-12">
            <Pagination 
              currentPage={currentPage}
              totalPages={totalPages}
              baseUrl={`/${lang}/blog/category/${category}`}
            />
          </div>
        )}
      </>
    )}
  </section>
</Layout>
