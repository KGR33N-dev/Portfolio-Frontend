---
import Layout from '~/layouts/PageLayout.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';
import { API_URLS } from '~/config/api';

// Type definition for blog post
interface BlogPost {
  id: number;
  title: string;
  slug: string;
  content: string;
  excerpt?: string;
  author?: string;
  category?: string;
  created_at: string;
  updated_at?: string;
  published_at?: string;
  featured_image?: string;
  is_published: boolean;
  language?: string;
  tags?: string[];
  meta_title?: string;
  meta_description?: string;
}

interface BlogApiResponse {
  items: BlogPost[];
  total: number;
  page: number;
  pages: number;
  per_page: number;
}

export async function getStaticPaths() {
  const paths: Array<{
    params: { lang: string; slug: string };
    props: { post: BlogPost };
  }> = [];
  
  // Generate paths for each language
  for (const lang of Object.keys(languages)) {
    try {
      // Fetch all posts to generate static paths
      const response = await fetch(API_URLS.getAllPosts());
      
      if (response.ok) {
        const data: BlogApiResponse = await response.json();
        const posts = data.items || [];
        
        // Filter posts by language and published status
        const langPosts = posts.filter(post => 
          post.language === lang && post.is_published
        );
        
        // Generate paths for each post
        for (const post of langPosts) {
          paths.push({
            params: { 
              lang,
              slug: post.slug 
            },
            props: { post }
          });
        }
      }
    } catch (error) {
      console.error(`Error fetching posts for ${lang}:`, error);
    }
  }
  
  return paths;
}

const { lang, slug } = Astro.params;
const { post } = Astro.props as { post: BlogPost };
const t = useTranslations(lang as keyof typeof languages);

// If post wasn't found in static generation, try to fetch it
let currentPost: BlogPost | null = post;
if (!currentPost) {
  try {
    const response = await fetch(API_URLS.getAllPosts());
    if (response.ok) {
      const data: BlogApiResponse = await response.json();
      const posts = data.items || [];
      currentPost = posts.find(p => p.slug === slug && p.language === lang && p.is_published) || null;
    }
  } catch (error) {
    console.error('Error fetching post:', error);
  }
}

// If still no post found, return 404
if (!currentPost) {
  return Astro.redirect('/404');
}

// Prepare metadata
const metadata = {
  title: currentPost.meta_title || currentPost.title,
  description: currentPost.meta_description || currentPost.excerpt || currentPost.content.substring(0, 160),
  robots: {
    index: currentPost.is_published,
    follow: true,
  },
  openGraph: {
    type: 'article',
    title: currentPost.title,
    description: currentPost.excerpt || currentPost.content.substring(0, 160),
    image: currentPost.featured_image,
    article: {
      author: currentPost.author,
      publishedTime: currentPost.published_at || currentPost.created_at,
      modifiedTime: currentPost.updated_at,
      section: currentPost.category,
      tags: currentPost.tags,
    }
  },
};
---

<Layout metadata={metadata}>
  <article class="px-4 md:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <!-- Breadcrumb -->
    <nav class="flex mb-8" aria-label="Breadcrumb">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href={`/${lang}`} class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white">
            <svg class="w-3 h-3 mr-2.5" fill="currentColor" viewBox="0 0 20 20">
              <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
            </svg>
            Home
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 text-gray-400 mx-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <a href={`/${lang}/blog`} class="ml-1 text-sm font-medium text-gray-700 hover:text-blue-600 md:ml-2 dark:text-gray-400 dark:hover:text-white">
              {t('blog.title')}
            </a>
          </div>
        </li>
        <li aria-current="page">
          <div class="flex items-center">
            <svg class="w-3 h-3 text-gray-400 mx-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2 dark:text-gray-400 truncate max-w-xs">
              {currentPost.title}
            </span>
          </div>
        </li>
      </ol>
    </nav>

    <!-- Article Header -->
    <header class="mb-8">
      {currentPost.featured_image && (
        <div class="mb-8 rounded-xl overflow-hidden shadow-lg">
          <img 
            src={currentPost.featured_image} 
            alt={currentPost.title}
            class="w-full h-64 md:h-96 object-cover"
          />
        </div>
      )}
      
      <div class="flex items-center gap-3 mb-4">
        <span class="text-sm font-semibold text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/30 px-3 py-1 rounded-full">
          {currentPost.category || 'Blog'}
        </span>
        <time class="text-sm text-gray-500 dark:text-gray-400 flex items-center">
          <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
          </svg>
          {new Date(currentPost.published_at || currentPost.created_at).toLocaleDateString(lang === 'pl' ? 'pl-PL' : 'en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
        {currentPost.updated_at && currentPost.updated_at !== currentPost.created_at && (
          <span class="text-sm text-gray-500 dark:text-gray-400">
            (Updated: {new Date(currentPost.updated_at).toLocaleDateString(lang === 'pl' ? 'pl-PL' : 'en-US')})
          </span>
        )}
      </div>
      
      <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold leading-tight mb-4 text-gray-900 dark:text-white">
        {currentPost.title}
      </h1>
      
      {currentPost.excerpt && (
        <p class="text-xl text-gray-600 dark:text-gray-300 leading-relaxed mb-6">
          {currentPost.excerpt}
        </p>
      )}
      
      {currentPost.tags && currentPost.tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {currentPost.tags.map((tag) => (
            <span class="text-sm bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-3 py-1 rounded-full">
              #{tag}
            </span>
          ))}
        </div>
      )}
    </header>

    <!-- Article Content -->
    <div class="prose prose-lg dark:prose-invert max-w-none">
      <div class="content" set:html={currentPost.content} />
    </div>

    <!-- Article Footer -->
    <footer class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div class="flex items-center space-x-4">
          {currentPost.author && (
            <div class="flex items-center">
              <div class="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-semibold">
                {currentPost.author.charAt(0).toUpperCase()}
              </div>
              <div class="ml-3">
                <p class="text-sm font-medium text-gray-900 dark:text-white">
                  {currentPost.author}
                </p>
                <p class="text-sm text-gray-500 dark:text-gray-400">
                  Author
                </p>
              </div>
            </div>
          )}
        </div>
        
        <div class="flex items-center space-x-4">
          <a 
            href={`/${lang}/blog`}
            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to Blog
          </a>
        </div>
      </div>
    </footer>
  </article>
</Layout>

<style>
  .content {
    /* Ensure proper spacing and typography for the content */
  }
  
  .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 {
    @apply font-bold text-gray-900 dark:text-white mt-8 mb-4;
  }
  
  .content h1 { @apply text-3xl; }
  .content h2 { @apply text-2xl; }
  .content h3 { @apply text-xl; }
  .content h4 { @apply text-lg; }
  
  .content p {
    @apply mb-4 leading-relaxed text-gray-700 dark:text-gray-300;
  }
  
  .content a {
    @apply text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 underline;
  }
  
  .content ul, .content ol {
    @apply mb-4 pl-6;
  }
  
  .content li {
    @apply mb-2;
  }
  
  .content blockquote {
    @apply border-l-4 border-blue-500 pl-4 italic text-gray-600 dark:text-gray-400 my-6;
  }
  
  .content code {
    @apply bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono;
  }
  
  .content pre {
    @apply bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto my-6;
  }
  
  .content pre code {
    @apply bg-transparent p-0;
  }
  
  .content img {
    @apply rounded-lg shadow-md my-6 max-w-full h-auto;
  }
  
  .content table {
    @apply w-full border-collapse border border-gray-300 dark:border-gray-600 my-6;
  }
  
  .content th, .content td {
    @apply border border-gray-300 dark:border-gray-600 px-4 py-2;
  }
  
  .content th {
    @apply bg-gray-100 dark:bg-gray-800 font-semibold;
  }
</style>
