---
import Layout from '~/layouts/PageLayout.astro';
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

// Type definition for blog post
interface BlogPost {
  id: number;
  title: string;
  slug: string;
  content?: string;
  excerpt?: string;
  author?: string;
  category?: string;
  created_at: string;
  updated_at?: string;
  published_at?: string;
  featured_image?: string;
  is_published: boolean;
  language?: string;
  tags?: string[];
  meta_title?: string;
  meta_description?: string;
}

interface BlogApiResponse {
  items: BlogPost[];
  total: number;
  page: number;
  pages: number;
  per_page: number;
}

interface ApiInfo {
  url: string;
  status: number;
  statusText: string;
  headers: Record<string, string>;
}

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof languages);

// Fetch blog posts from FastAPI
const API_BASE_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8000';
let posts: BlogPost[] = [];
let error: string | null = null;
let apiInfo: ApiInfo | null = null;

console.log('üîç Fetching from API:', `${API_BASE_URL}/api/blog/`);

try {
  const response = await fetch(`${API_BASE_URL}/api/blog/`);
  
  apiInfo = {
    url: `${API_BASE_URL}/api/blog/`,
    status: response.status,
    statusText: response.statusText,
    headers: Object.fromEntries(response.headers.entries())
  };
  
  console.log('üì° API Response:', apiInfo);
  
  if (response.ok) {
    const data: BlogApiResponse = await response.json();
    // API returns {items: [], total: number, page: number, pages: number, per_page: number}
    posts = data.items || [];
    console.log('‚úÖ Posts loaded:', posts.length);
    console.log('üìä API data:', { total: data.total, page: data.page, pages: data.pages });
    console.log('üìÑ Sample post:', posts[0]);
  } else {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
} catch (e) {
  console.error('‚ùå Error fetching posts:', e);
  error = e instanceof Error ? e.message : 'Unknown error';
  
  // Try to get more details about the error
  if (e instanceof TypeError && e.message.includes('fetch')) {
    error = `Nie mo≈ºna po≈ÇƒÖczyƒá z API (${API_BASE_URL}). Sprawd≈∫ czy serwer API jest uruchomiony.`;
  }
}

const metadata = {
  title: t('blog.title'),
  description: t('blog.description'),
  robots: {
    index: true,
    follow: true,
  },
  openGraph: {
    type: 'website',
    title: t('blog.title'),
    description: t('blog.subtitle'),
  },
};
---

<Layout metadata={metadata}>
  <section class="px-4 md:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-6xl">
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold leading-tight mb-4">
        {t('blog.title')}
      </h1>
      <p class="text-xl text-muted max-w-3xl mx-auto">
        {t('blog.subtitle')}
      </p>
    </div>

    <!-- Debug Information (only in development) -->
    {import.meta.env.DEV && (
      <div class="mb-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
        <h3 class="text-lg font-semibold mb-2">üîß Debug Information</h3>
        <div class="space-y-2 text-sm">
          <div><strong>API URL:</strong> {apiInfo?.url || API_BASE_URL + '/api/blog/'}</div>
          <div><strong>Status:</strong> {apiInfo?.status || 'N/A'} {apiInfo?.statusText || ''}</div>
          <div><strong>Posts Count:</strong> {posts.length}</div>
          <div><strong>Error:</strong> {error || 'None'}</div>
          {apiInfo && (
            <details>
              <summary class="cursor-pointer hover:text-blue-600">Response Headers</summary>
              <pre class="mt-2 p-2 bg-gray-200 dark:bg-gray-700 rounded text-xs overflow-auto">
                {JSON.stringify(apiInfo.headers, null, 2)}
              </pre>
            </details>
          )}
          {posts.length > 0 && (
            <details>
              <summary class="cursor-pointer hover:text-blue-600">Sample Post Data</summary>
              <pre class="mt-2 p-2 bg-gray-200 dark:bg-gray-700 rounded text-xs overflow-auto">
                {JSON.stringify(posts[0], null, 2)}
              </pre>
            </details>
          )}
        </div>
      </div>
    )}

    <!-- Blog Posts Section -->
    {error ? (
      <div class="text-center py-16">
        <div class="bg-red-50 dark:bg-red-900/20 rounded-lg p-8 max-w-2xl mx-auto">
          <div class="text-red-600 dark:text-red-400 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-red-800 dark:text-red-200 mb-4">Error Loading Posts</h2>
          <p class="text-red-700 dark:text-red-300">{error}</p>
        </div>
      </div>
    ) : posts.length === 0 ? (
      <div class="text-center py-16">
        <div class="bg-blue-50 dark:bg-gray-800 rounded-lg p-8 max-w-2xl mx-auto">
          <div class="text-blue-600 dark:text-blue-400 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
            </svg>
          </div>
          <h2 class="text-3xl font-bold text-default mb-4">{t('notification.comingSoon.title')}</h2>
          <p class="text-lg text-muted">{t('notification.comingSoon.message')}</p>
        </div>
      </div>
    ) : (
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {posts.map((post) => (
          <article class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transition-transform hover:scale-105">
            {post.featured_image && (
              <img 
                src={post.featured_image} 
                alt={post.title}
                class="w-full h-48 object-cover"
              />
            )}
            <div class="p-6">
              <div class="flex items-center gap-2 mb-3">
                <span class="text-xs font-medium text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/30 px-2 py-1 rounded">
                  {post.category || 'Blog'}
                </span>
                <time class="text-xs text-muted">
                  {new Date(post.created_at).toLocaleDateString(lang === 'pl' ? 'pl-PL' : 'en-US')}
                </time>
              </div>
              <h3 class="text-xl font-bold text-default mb-3 line-clamp-2">
                {post.title}
              </h3>
              <p class="text-muted mb-4 line-clamp-3">
                {post.excerpt || post.content?.substring(0, 150) + '...'}
              </p>
              <a 
                href={`/${lang}/blog/${post.slug}`}
                class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 font-medium"
              >
                {t('blog.readMore') || 'Read more'}
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </a>
            </div>
          </article>
        ))}
      </div>
    )}
  </section>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>