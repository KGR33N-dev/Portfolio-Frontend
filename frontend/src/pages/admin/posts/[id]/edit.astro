---
import Layout from '~/layouts/PageLayout.astro';
import { useTranslations } from '~/i18n/utils';

export async function getStaticPaths() {
  // Return empty array - this page will be handled dynamically
  return [];
}

const t = useTranslations('en');

// Extract post ID from URL
const url = new URL(Astro.request.url);
const postId = url.pathname.split('/').pop();

const metadata = {
  title: 'Edit Post',
  robots: {
    index: false,
    follow: false,
  },
};
---

<Layout metadata={metadata}>
  <!-- Admin Navigation -->
  <nav class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <div class="flex items-center space-x-4">
          <a href="/admin/dashboard" class="text-blue-600 hover:text-blue-800 dark:text-blue-400">
            ← Back to Dashboard
          </a>
          <h1 class="text-xl font-semibold text-gray-900 dark:text-white">
            {t('admin.editPost')}
          </h1>
        </div>
        <div class="flex items-center space-x-4">
          <span id="admin-user-email" class="text-sm text-gray-600 dark:text-gray-400"></span>
          <button 
            id="logout-button"
            class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium"
          >
            {t('admin.logout')}
          </button>
        </div>
      </div>
    </div>
  </nav>

  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Loading State -->
    <div id="loading-state" class="text-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
      <p class="text-gray-600 dark:text-gray-400">Loading post...</p>
    </div>

    <!-- Error/Success Messages -->
    <div id="success-message" class="hidden mb-4 bg-green-100 dark:bg-green-900/20 border border-green-400 text-green-700 dark:text-green-400 px-4 py-3 rounded">
    </div>
    <div id="error-message" class="hidden mb-4 bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-400 px-4 py-3 rounded">
    </div>

    <!-- Post Form -->
    <form id="post-form" class="hidden space-y-6 bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
      <input type="hidden" id="post-id" name="id">
      
      <!-- Title and Slug -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            {t('admin.postTitle')} *
          </label>
          <input 
            type="text" 
            id="title" 
            name="title" 
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="Enter post title..."
          >
        </div>
        <div>
          <label for="slug" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            {t('admin.postSlug')} *
          </label>
          <input 
            type="text" 
            id="slug" 
            name="slug" 
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="url-friendly-slug"
          >
        </div>
      </div>

      <!-- Excerpt -->
      <div>
        <label for="excerpt" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
          {t('admin.postExcerpt')}
        </label>
        <textarea 
          id="excerpt" 
          name="excerpt" 
          rows="3"
          class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          placeholder="Brief description of the post..."
        ></textarea>
      </div>

      <!-- Meta Fields -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            {t('admin.postCategory')}
          </label>
          <input 
            type="text" 
            id="category" 
            name="category"
            list="categories-list"
            class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="e.g., Programming, GameDev"
          >
          <datalist id="categories-list"></datalist>
        </div>
        
        <div>
          <label for="language" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            {t('admin.postLanguage')} *
          </label>
          <select 
            id="language" 
            name="language" 
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          >
            <option value="en">English</option>
            <option value="pl">Polski</option>
          </select>
        </div>
        
        <div>
          <label for="is_published" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            {t('admin.postStatus')}
          </label>
          <select 
            id="is_published" 
            name="is_published"
            class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          >
            <option value="false">{t('admin.draft')}</option>
            <option value="true">{t('admin.published')}</option>
          </select>
        </div>
      </div>

      <!-- Tags -->
      <div>
        <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
          {t('admin.postTags')}
        </label>
        <input 
          type="text" 
          id="tags" 
          name="tags"
          class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          placeholder="tag1, tag2, tag3"
        >
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Separate tags with commas</p>
      </div>

      <!-- Featured Image -->
      <div>
        <label for="featured_image" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
          {t('admin.postImage')}
        </label>
        <div class="mt-1 flex items-center space-x-4">
          <input 
            type="url" 
            id="featured_image" 
            name="featured_image"
            class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="https://example.com/image.jpg"
          >
          <button 
            type="button" 
            id="upload-image"
            class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md text-sm"
          >
            Upload
          </button>
        </div>
        <input type="file" id="image-file" accept="image/*" class="hidden">
        <div id="image-preview" class="mt-2 hidden">
          <img id="preview-img" class="h-32 w-auto rounded border border-gray-300 dark:border-gray-600" alt="Preview">
        </div>
      </div>

      <!-- Content Editor -->
      <div>
        <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          {t('admin.postContent')} *
        </label>
        <div class="border border-gray-300 dark:border-gray-600 rounded-md">
          <textarea 
            id="content" 
            name="content" 
            required
            rows="20"
            class="w-full px-3 py-2 border-0 focus:outline-none focus:ring-0 bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-md"
            placeholder="Write your post content here..."
          ></textarea>
        </div>
      </div>

      <!-- Actions -->
      <div class="flex justify-between">
        <button 
          type="button" 
          id="delete-button"
          class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md font-medium"
        >
          {t('admin.deletePost')}
        </button>
        <div class="space-x-4">
          <button 
            type="button" 
            onclick="history.back()"
            class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            id="save-button"
            class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md font-medium"
          >
            {t('admin.updatePost')}
          </button>
        </div>
      </div>
    </form>
  </div>
</Layout>

<script define:vars={{ postId }} is:inline>
  // Import API configuration - note: we need to manually include the config since we're in inline script
  const USE_LOCAL_API = false; // Zmień na true dla lokalnego API
  
  const API_CONFIG = USE_LOCAL_API ? {
    baseUrl: 'http://localhost:8000',
    blog: 'http://localhost:8000/api/blog',
    auth: 'http://localhost:8000/api/auth',
    admin: 'http://localhost:8000/api/admin'
  } : {
    baseUrl: 'http://51.20.78.79:8000',
    blog: 'http://51.20.78.79:8000/api/blog',
    auth: 'http://51.20.78.79:8000/api/auth',
    admin: 'http://51.20.78.79:8000/api/admin'
  };
  
  console.log(`🔧 Admin Edit API: Using ${USE_LOCAL_API ? 'LOCAL' : 'PRODUCTION'} backend (${API_CONFIG.baseUrl})`);
  
  document.addEventListener('DOMContentLoaded', async () => {
    // Check authentication
    const token = localStorage.getItem('admin_token');
    if (!token) {
      window.location.href = '/admin/login';
      return;
    }
    
    // Load the post data
    await loadPost();
    
    // Setup form functionality
    setupFormHandlers();
  });
  
  async function loadPost() {
    const loadingState = document.getElementById('loading-state');
    const form = document.getElementById('post-form');
    const errorDiv = document.getElementById('error-message');
    
    try {
      if (!postId) {
        throw new Error('Post ID not found');
      }
      
      const response = await fetch(`${API_CONFIG.blog}/${postId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('admin_token')}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to load post');
      }
      
      const post = await response.json();
      
      // Populate form fields
      document.getElementById('post-id').value = post.id.toString();
      document.getElementById('title').value = post.title;
      document.getElementById('slug').value = post.slug;
      document.getElementById('excerpt').value = post.excerpt || '';
      document.getElementById('category').value = post.category || '';
      document.getElementById('language').value = post.language;
      document.getElementById('is_published').value = post.is_published.toString();
      document.getElementById('tags').value = post.tags.join(', ');
      document.getElementById('featured_image').value = post.featured_image || '';
      document.getElementById('content').value = post.content;
      
      // Show image preview if exists
      if (post.featured_image) {
        const preview = document.getElementById('image-preview');
        const img = document.getElementById('preview-img');
        if (preview && img) {
          img.src = post.featured_image;
          preview.classList.remove('hidden');
        }
      }
      
      // Hide loading, show form
      if (loadingState) loadingState.classList.add('hidden');
      if (form) form.classList.remove('hidden');
      
    } catch (error) {
      if (loadingState) loadingState.classList.add('hidden');
      if (errorDiv) {
        errorDiv.textContent = 'Failed to load post: ' + (error instanceof Error ? error.message : 'Unknown error');
        errorDiv.classList.remove('hidden');
      }
    }
  }
  
  function setupFormHandlers() {
    // Form submission
    const form = document.getElementById('post-form');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const saveButton = document.getElementById('save-button');
        const errorDiv = document.getElementById('error-message');
        const successDiv = document.getElementById('success-message');
        
        // Hide previous messages
        if (errorDiv) errorDiv.classList.add('hidden');
        if (successDiv) successDiv.classList.add('hidden');
        
        // Show loading state
        if (saveButton) {
          saveButton.textContent = 'Updating...';
          saveButton.disabled = true;
        }
        
        try {
          // Prepare post data
          const tags = formData.get('tags')?.toString().split(',').map(tag => tag.trim()).filter(Boolean) || [];
          const postIdValue = parseInt(formData.get('id')?.toString() || '0');
          
          const postData = {
            title: formData.get('title')?.toString() || '',
            slug: formData.get('slug')?.toString() || '',
            content: formData.get('content')?.toString() || '',
            excerpt: formData.get('excerpt')?.toString() || '',
            category: formData.get('category')?.toString() || '',
            tags,
            featured_image: formData.get('featured_image')?.toString() || '',
            language: formData.get('language')?.toString() || 'en',
            is_published: formData.get('is_published') === 'true',
          };
          
          const response = await fetch(`${API_CONFIG.blog}/${postIdValue}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('admin_token')}`
            },
            body: JSON.stringify(postData)
          });
          
          if (!response.ok) {
            throw new Error('Failed to update post');
          }
          
          if (successDiv) {
            successDiv.textContent = 'Post updated successfully!';
            successDiv.classList.remove('hidden');
          }
          
        } catch (error) {
          const message = error instanceof Error ? error.message : 'Failed to update post';
          if (errorDiv) {
            errorDiv.textContent = message;
            errorDiv.classList.remove('hidden');
          }
        } finally {
          if (saveButton) {
            saveButton.textContent = 'Update Post';
            saveButton.disabled = false;
          }
        }
      });
    }
    
    // Delete button
    const deleteButton = document.getElementById('delete-button');
    if (deleteButton) {
      deleteButton.addEventListener('click', async () => {
        if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
          return;
        }
        
        const errorDiv = document.getElementById('error-message');
        const postIdInput = document.getElementById('post-id');
        
        deleteButton.textContent = 'Deleting...';
        deleteButton.disabled = true;
        
        try {
          const postIdValue = parseInt(postIdInput.value);
          
          const response = await fetch(`${API_CONFIG.blog}/${postIdValue}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('admin_token')}`
            }
          });
          
          if (!response.ok) {
            throw new Error('Failed to delete post');
          }
          
          // Redirect to dashboard
          window.location.href = '/admin/dashboard';
          
        } catch (error) {
          const message = error instanceof Error ? error.message : 'Failed to delete post';
          if (errorDiv) {
            errorDiv.textContent = message;
            errorDiv.classList.remove('hidden');
          }
          deleteButton.textContent = 'Delete Post';
          deleteButton.disabled = false;
        }
      });
    }
    
    // Logout button
    const logoutButton = document.getElementById('logout-button');
    if (logoutButton) {
      logoutButton.addEventListener('click', () => {
        localStorage.removeItem('admin_token');
        window.location.href = '/admin/login';
      });
    }
  }
</script>
