---
// Profile dropdown component - shows login/register or user profile with dropdown
import { useTranslations } from '~/i18n/utils';
import { languages } from '~/i18n';

// Get current language from the URL
const currentPath = Astro.url.pathname;
const lang = currentPath.split('/')[1] || 'en';

const t = useTranslations(lang as keyof typeof languages);
---

<div id="profile-dropdown-container" class="relative">
  <!-- Login/Register button (shown when not authenticated) -->
  <a
    id="profile-login-btn"
    href="#"
    class="font-semibold btn-secondary md:px-6 ml-2 px-5.5 py-2.5 shadow-none text-sm w-auto inline-flex items-center justify-center rounded-lg bg-gray-200 text-gray-800 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 transition-colors duration-200"
    rel="noopener noreferrer"
    target="_self"
  >
    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
    </svg>
    {t('auth.title')}
  </a>

  <!-- Profile button with dropdown (shown when authenticated) -->
  <div id="profile-dropdown" class="relative" style="display: none;">
    <button
      id="profile-toggle-btn"
      type="button"
      class="ml-2 flex items-center justify-center w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <span class="sr-only">Open user menu</span>
      <!-- Profile icon -->
      <svg class="w-6 h-6 text-gray-600 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
      </svg>
    </button>

    <!-- Dropdown menu - positioned above on mobile, below on desktop -->
    <div
      id="profile-dropdown-menu"
      class="absolute left-0 right-auto md:right-0 md:left-auto mt-2 md:mt-2 md:top-full bottom-full md:bottom-auto mb-2 md:mb-0 w-56 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-50 hidden"
      role="menu"
      aria-orientation="vertical"
      aria-labelledby="profile-toggle-btn"
    >
      <!-- User info section -->
      <div id="user-info-section" class="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
        <p class="text-sm font-medium text-gray-900 dark:text-white" id="user-email"></p>
        <p class="text-xs text-gray-600 dark:text-gray-400" id="user-role"></p>
      </div>

      <!-- Menu items -->
      <div class="py-1">
        <!-- Admin Dashboard (shown only for admins) -->
        <a
          id="admin-dashboard-link"
          href="#"
          class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
          role="menuitem"
          style="display: none;"
        >
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            {t('admin.dashboard')}
          </div>
        </a>

        <!-- Account Settings -->
        <a
          id="account-settings-link"
          href="#"
          class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
          role="menuitem"
        >
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            {t('admin.settings')}
          </div>
        </a>

        <!-- Divider -->
        <div class="border-t border-gray-200 dark:border-gray-700 my-1"></div>

        <!-- Logout -->
        <button
          id="profile-logout-btn"
          type="button"
          class="w-full text-left px-4 py-2 text-sm text-red-700 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors duration-200"
          role="menuitem"
        >
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
            </svg>
            {t('auth.logout')}
          </div>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { AdminAuth } from '../../utils/adminAuth';
  
  async function initProfileDropdown() {
    const loginBtn = document.getElementById('profile-login-btn') as HTMLAnchorElement;
    const profileDropdown = document.getElementById('profile-dropdown');
    
    console.log('🔍 ProfileDropdown Debug:');
    console.log('Login button found:', !!loginBtn);
    console.log('Profile dropdown found:', !!profileDropdown);

    // Set login URL with current language
    if (loginBtn) {
      const currentLang = window.location.pathname.split('/')[1] || 'en';
      loginBtn.href = `/${currentLang}/login`;
      console.log('Login URL set to:', loginBtn.href);
    }

    // Quick check for token
    const token = localStorage.getItem('access_token');
    console.log('Token exists:', !!token);
    
    if (!token) {
      // No token - show login button, hide profile dropdown
      console.log('No token - showing login button');
      if (loginBtn) {
        loginBtn.style.display = 'inline-flex';
        console.log('Login button shown');
      }
      if (profileDropdown) {
        profileDropdown.style.display = 'none';
        console.log('Profile dropdown hidden');
      }
      return;
    }

    console.log('Token found - verifying with API...');

    // Verify authentication securely via API
    const user = await AdminAuth.verifyUser();
    
    console.log('User verification result:', user);
    
    if (!user) {
      // Invalid token - show login button, hide profile dropdown
      console.log('Invalid token - showing login button');
      if (loginBtn) loginBtn.style.display = 'inline-flex';
      if (profileDropdown) profileDropdown.style.display = 'none';
      return;
    }

    console.log('User authenticated - showing profile dropdown for:', user.email, 'Admin:', user.is_admin);

    // Valid user - hide login button, show profile dropdown
    if (loginBtn) loginBtn.style.display = 'none';
    if (profileDropdown) profileDropdown.style.display = 'block';
    
    // Update profile info
    const emailElement = document.getElementById('user-email');
    const roleElement = document.getElementById('user-role');
    const adminDashboardLink = document.getElementById('admin-dashboard-link') as HTMLAnchorElement;
    const accountSettingsLink = document.getElementById('account-settings-link') as HTMLAnchorElement;
    
    if (emailElement) {
      emailElement.textContent = user.email || '';
    }
    
    if (roleElement) {
      roleElement.textContent = user.is_admin ? 'Administrator' : 'User';
    }
    
    // Setup admin dashboard link
    if (adminDashboardLink) {
      if (user.is_admin) {
        const currentLang = window.location.pathname.split('/')[1] || 'en';
        adminDashboardLink.href = `/${currentLang}/admin/dashboard`;
        adminDashboardLink.style.display = 'block';
      } else {
        adminDashboardLink.style.display = 'none';
      }
    }

    // Setup account settings link
    if (accountSettingsLink) {
      const currentLang = window.location.pathname.split('/')[1] || 'en';
      accountSettingsLink.href = `/${currentLang}/account/settings`;
    }

    // Handle dropdown toggle
    const dropdownToggle = document.getElementById('profile-toggle-btn');
    const dropdownMenu = document.getElementById('profile-dropdown-menu');
    
    if (dropdownToggle && dropdownMenu) {
      // Remove existing listeners
      const newToggle = dropdownToggle.cloneNode(true) as HTMLElement;
      dropdownToggle.parentNode?.replaceChild(newToggle, dropdownToggle);
      
      newToggle.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdownMenu.classList.toggle('hidden');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', () => {
        dropdownMenu.classList.add('hidden');
      });
    }

    // Setup logout functionality
    const logoutBtn = document.getElementById('profile-logout-btn');
    if (logoutBtn) {
      // Remove old listeners
      const newLogoutBtn = logoutBtn.cloneNode(true) as HTMLElement;
      logoutBtn.parentNode?.replaceChild(newLogoutBtn, logoutBtn);
      
      newLogoutBtn.addEventListener('click', () => {
        console.log('Logout clicked');
        AdminAuth.logout();
        window.location.reload();
      });
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initProfileDropdown);
  
  // Listen for navigation changes (for SPA routing)
  document.addEventListener('astro:page-load', initProfileDropdown);
  
  // Listen for storage changes (if user logs in/out in another tab)
  window.addEventListener('storage', (e) => {
    if (e.key === 'access_token') {
      initProfileDropdown();
    }
  });
  
  // Also initialize if this script runs after DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProfileDropdown);
  } else {
    initProfileDropdown();
  }
</script>

<style>
  /* Ensure dropdown appears above other content */
  #profile-dropdown-menu {
    z-index: 1000;
  }
  
  /* Smooth transitions */
  #profile-dropdown-menu {
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
  }
  
  #profile-dropdown-menu.hidden {
    opacity: 0;
    pointer-events: none;
  }
  
  #profile-dropdown-menu:not(.hidden) {
    opacity: 1;
    pointer-events: auto;
  }
  
  /* Mobile positioning - dropdown goes up and aligns to left */
  @media (max-width: 768px) {
    #profile-dropdown-menu {
      bottom: 100%;
      top: auto;
      left: 0;
      right: auto;
      margin-bottom: 0.5rem;
      margin-top: 0;
      /* Ensure it doesn't go off screen */
      transform-origin: bottom left;
    }
    
    #profile-dropdown-menu.hidden {
      transform: translateY(4px);
    }
    
    #profile-dropdown-menu:not(.hidden) {
      transform: translateY(0);
    }
  }
  
  /* Desktop positioning - dropdown goes down and aligns to right */
  @media (min-width: 769px) {
    #profile-dropdown-menu {
      top: 100%;
      bottom: auto;
      right: 0;
      left: auto;
      margin-top: 0.5rem;
      margin-bottom: 0;
      /* Ensure it doesn't go off screen */
      transform-origin: top right;
    }
    
    #profile-dropdown-menu.hidden {
      transform: translateY(-4px);
    }
    
    #profile-dropdown-menu:not(.hidden) {
      transform: translateY(0);
    }
  }
</style>
