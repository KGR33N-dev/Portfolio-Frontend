---
import { APP_BLOG } from 'astrowind:config';
import { API_URLS } from '~/config/api';
import Grid from '~/components/blog/Grid.astro';
import { getBlogPermalink, getPermalink } from '~/utils/permalinks';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Widget, Post } from '~/types';

interface BlogPost {
  id: number;
  title: string;
  slug: string;
  excerpt?: string;
  content?: string;
  published_at?: string;
  tags?: string[];
  category?: string;
  featured_image?: string;
  status?: string;
}

export interface Props extends Widget {
  title?: string;
  linkText?: string;
  linkUrl?: string | URL;
  information?: string;
  postIds: string[];
}

const {
  title = await Astro.slots.render('title'),
  linkText = 'View all posts',
  linkUrl = getBlogPermalink(),
  information = await Astro.slots.render('information'),
  postIds = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

let posts: Post[] = [];

// Fetch posts by IDs from the API
if (APP_BLOG.isEnabled && postIds.length > 0) {
  try {
    const response = await fetch(`${API_URLS.getAllPosts()}?ids=${postIds.join(',')}`);
    if (response.ok) {
      const data = await response.json();
      const blogPosts: BlogPost[] = data.posts || [];
      
      // Transform API data to Post type
      posts = blogPosts.map((blogPost: BlogPost) => ({
        id: blogPost.id.toString(),
        slug: blogPost.slug,
        permalink: getPermalink(blogPost.slug, 'post'),
        publishDate: blogPost.published_at ? new Date(blogPost.published_at) : new Date(),
        title: blogPost.title,
        excerpt: blogPost.excerpt,
        image: blogPost.featured_image,
        category: blogPost.category ? { slug: blogPost.category, title: blogPost.category } : undefined,
        tags: blogPost.tags?.map(tag => ({ slug: tag, title: tag })) || [],
      }));
    }
  } catch (error) {
    console.error('Error fetching highlighted posts:', error);
  }
}
---

{
  APP_BLOG.isEnabled ? (
    <WidgetWrapper id={id} isDark={isDark} containerClass={classes?.container as string} bg={bg}>
      <div class="flex flex-col lg:justify-between lg:flex-row mb-8">
        {title && (
          <div class="md:max-w-sm">
            <h2
              class="text-3xl font-bold tracking-tight sm:text-4xl sm:leading-none group font-heading mb-2"
              set:html={title}
            />
            {APP_BLOG.list.isEnabled && linkText && linkUrl && (
              <a
                class="text-muted dark:text-slate-400 hover:text-primary transition ease-in duration-200 block mb-6 lg:mb-0"
                href={linkUrl}
              >
                {linkText} Â»
              </a>
            )}
          </div>
        )}

        {information && <p class="text-muted dark:text-slate-400 lg:text-sm lg:max-w-md" set:html={information} />}
      </div>

      <Grid posts={posts} />
    </WidgetWrapper>
  ) : (
    <Fragment />
  )
}
