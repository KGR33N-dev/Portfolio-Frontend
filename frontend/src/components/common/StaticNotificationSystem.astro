---
// StaticNotificationSystem - Always available notification system without initialization
// This component provides immediate notification functionality across the entire site
import { ui, defaultLang } from '~/i18n';
---

<!-- Static notification container - always present in DOM -->
<div id="notification-container" class="fixed top-20 right-4 space-y-3 pointer-events-none" style="z-index: 40;"></div>

<!-- Inline notification system with i18n support -->
<script is:inline define:vars={{ ui, defaultLang }}>
  // Static notification system with i18n integration
  window.StaticNotifications = (function() {
    let notificationCounter = 0;

    function generateId() {
      return 'notification-' + Date.now() + '-' + (++notificationCounter);
    }

    // Get current language from URL or fallback
    function getCurrentLanguage() {
      try {
        const path = window.location.pathname;
        const langMatch = path.match(/^\/([a-z]{2})\//);
        return langMatch ? langMatch[1] : 'en';
      } catch {
        return 'en';
      }
    }

    // Get translation for a key
    function getTranslation(key, lang = null) {
      try {
        lang = lang || getCurrentLanguage();
        
        // Use ui object from i18n directly
        if (ui && ui[lang] && ui[lang][key]) {
          return ui[lang][key];
        }
        
        // Fallback to default language
        if (ui && ui[defaultLang] && ui[defaultLang][key]) {
          return ui[defaultLang][key];
        }
        
        // If translation not found, log warning and return the key itself
        console.warn(`Translation missing for key: ${key} in language: ${lang}`);
        return key;
      } catch (error) {
        console.error('Translation error:', error);
        return key || 'Translation error';
      }
    }

    function getNotificationStyles(type) {
      const styles = {
        success: {
          bgColor: 'bg-green-50 dark:bg-green-900',
          textColor: 'text-green-800 dark:text-green-200',
          borderColor: 'border-green-200 dark:border-green-700',
          icon: `<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>`
        },
        error: {
          bgColor: 'bg-red-50 dark:bg-red-900',
          textColor: 'text-red-800 dark:text-red-200',
          borderColor: 'border-red-200 dark:border-red-700',
          icon: `<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>`
        },
        warning: {
          bgColor: 'bg-yellow-50 dark:bg-yellow-900',
          textColor: 'text-yellow-800 dark:text-yellow-200',
          borderColor: 'border-yellow-200 dark:border-yellow-700',
          icon: `<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>`
        },
        info: {
          bgColor: 'bg-blue-50 dark:bg-blue-900',
          textColor: 'text-blue-800 dark:text-blue-200',
          borderColor: 'border-blue-200 dark:border-blue-700',
          icon: `<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
          </svg>`
        }
      };
      return styles[type] || styles.info;
    }

    function show(messageOrKey, type, duration, isTranslationKey = false) {
      let message;
      
      // Handle translation keys vs direct messages
      if (isTranslationKey || (typeof messageOrKey === 'string' && messageOrKey.includes('.'))) {
        // Treat as translation key
        message = getTranslation(messageOrKey);
      } else {
        // Handle direct messages (backward compatibility)
        if (typeof messageOrKey !== 'string') {
          if (messageOrKey && typeof messageOrKey === 'object') {
            // Try to extract meaningful text from object
            if (messageOrKey.message) {
              message = messageOrKey.message;
            } else if (messageOrKey.detail) {
              message = messageOrKey.detail;
            } else if (messageOrKey.error) {
              message = messageOrKey.error;
            } else {
              try {
                message = JSON.stringify(messageOrKey);
              } catch {
                message = getTranslation('error.general');
              }
            }
          } else {
            message = String(messageOrKey) || getTranslation('error.general');
          }
        } else {
          message = messageOrKey;
        }
      }
      
      type = type || 'info';
      duration = duration !== undefined ? duration : 5000;

      const container = document.getElementById('notification-container');
      if (!container) {
        console.error('Notification container not found');
        return null;
      }

      const notificationId = generateId();
      const styles = getNotificationStyles(type);

      // Create notification element
      const notification = document.createElement('div');
      notification.id = notificationId;
      notification.className = 'pointer-events-auto transform transition-all duration-300 ease-in-out translate-x-full opacity-0';
      
      notification.innerHTML = `
        <div class="w-auto ${styles.bgColor} border ${styles.borderColor} rounded-lg shadow-lg px-4 py-3" style="opacity: 0.9;">
          <div class="flex items-center whitespace-nowrap">
            <div class="flex-shrink-0 ${styles.textColor}">
              ${styles.icon}
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium ${styles.textColor}">
                ${message}
              </p>
            </div>
            <div class="ml-4 flex-shrink-0 flex">
              <button 
                class="inline-flex ${styles.textColor} hover:opacity-75 focus:outline-none transition-opacity duration-200"
                onclick="window.StaticNotifications.close('${notificationId}')"
              >
                <span class="sr-only">Close</span>
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `;

      // Add to container
      container.appendChild(notification);

      // Animate in immediately
      setTimeout(function() {
        notification.className = 'pointer-events-auto transform transition-all duration-300 ease-in-out translate-x-0 opacity-100';
      }, 10);

      // Auto-close if duration is set
      if (duration > 0) {
        setTimeout(function() {
          window.StaticNotifications.close(notificationId);
        }, duration);
      }

      return notificationId;
    }

    function close(notificationId) {
      const notification = document.getElementById(notificationId);
      if (!notification) return;

      // Animate out
      notification.className = 'pointer-events-auto transform transition-all duration-300 ease-in-out translate-x-full opacity-0';
      
      // Remove after animation
      setTimeout(function() {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }

    // Public API
    return {
      show: show,
      close: close,
      
      // Direct message methods (backward compatibility)
      success: function(message, duration) {
        return show(message, 'success', duration);
      },
      error: function(message, duration) {
        return show(message, 'error', duration);
      },
      warning: function(message, duration) {
        return show(message, 'warning', duration);
      },
      info: function(message, duration) {
        return show(message, 'info', duration);
      },
      
      // Translation key methods (new i18n support)
      showTranslated: function(translationKey, type, duration) {
        return show(translationKey, type, duration, true);
      },
      successKey: function(translationKey, duration) {
        return show(translationKey, 'success', duration, true);
      },
      errorKey: function(translationKey, duration) {
        return show(translationKey, 'error', duration, true);
      },
      warningKey: function(translationKey, duration) {
        return show(translationKey, 'warning', duration, true);
      },
      infoKey: function(translationKey, duration) {
        return show(translationKey, 'info', duration, true);
      },
      
      // Utility methods
      getCurrentLanguage: getCurrentLanguage,
      getTranslation: getTranslation
    };
  })();

  console.log('âœ… Static notification system ready with i18n support - no initialization required');
</script>
